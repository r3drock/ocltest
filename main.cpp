#define CNN_TEST
#ifdef CNN_TEST
#include <iostream>
#include <map>
#include <vector>
#include <chrono>

std::map<std::string, std::vector<int> > stopwatch_timings;
std::map<std::string, std::chrono::steady_clock::time_point> start_times;

std::chrono::steady_clock::time_point current_time() {
  return std::chrono::steady_clock::now();
}

int total_time(std::vector<int> timings)
{
    int sum = 0;
    for(auto const& timing: timings)
    {
        sum += timing;
    }
    return sum;
}

void start_timing(const char* identifier)
{
    if (start_times.find(identifier) == start_times.end())
    {
        start_times.insert({ identifier, current_time() });
    } else
    {
        start_times[identifier] = current_time();
    }
}

void stop_timing(const char* identifier)
{
    std::chrono::steady_clock::time_point end = current_time();
    std::chrono::steady_clock::time_point start = start_times[identifier];
    int duration = std::chrono::duration_cast<std::chrono::nanoseconds>(end - start).count();

    if (stopwatch_timings.find(identifier) == stopwatch_timings.end())
    {
        stopwatch_timings.insert({ identifier, std::vector<int>() });
    }

    stopwatch_timings[identifier].push_back(duration);
}

#define CNN_STOPWATCH(name) for(bool _start = true; (_start ? start_timing(name) : stop_timing(name)), _start; _start = false)
#else
#define CNN_STOPWATCH(name) STOPWATCH(name)
#endif
#define LAYER_STOPWATCH
#ifdef LAYER_STOPWATCH
#define INTERNAL_CNN_STOPWATCH(name) CNN_STOPWATCH(name)
#else
#define INTERNAL_CNN_STOPWATCH(name) // CNN_STOPWATCH(name)
#endif

#define LINEAR_3(i1, i2, i3, d2, d3) ((i1) * (d2) * (d3) + (i2) * (d3) + (i3))
#define LINEAR_4(i1, i2, i3, i4, d2, d3, d4) ((i1) * (d2) * (d3) * (d4) + (i2) * (d3) * (d4) + (i3) * (d4) + (i4))
#define MAX(a, b) ((a) > (b) ? (a) : (b))

// includes
#include <CL/cl.h>
#include <stdlib.h>

cl_int errNum;
cl_context context;
cl_command_queue commandQueue;
cl_program program;

// buffers
float separable_conv2d_6_internal_1_W_[] = {-1.0299174785614014f,-0.7187300324440002f,0.41224345564842224f,0.42398306727409363f,-0.5002785921096802f,-2.3287012577056885f,-0.8622229695320129f,-1.4436947107315063f,-0.14598743617534637f,-0.663096010684967f,0.26683396100997925f,-0.34726014733314514f,-1.4952480792999268f,-0.8092780113220215f,-0.2202264964580536f,-0.1287665218114853f,0.13643066585063934f,-3.5613629817962646f,-1.9674489498138428f,-1.7091423273086548f,-0.5929750800132751f,-1.4317723512649536f,0.42840293049812317f,-0.4904371500015259f,-0.38027000427246094f,-0.6622756123542786f,-0.03256722167134285f,-0.21384072303771973f,0.1911373883485794f,-2.522857666015625f,-1.6847249269485474f,-0.6022032499313354f,-0.3444325625896454f,-1.6270148754119873f,0.53294837474823f,-0.5188931226730347f,0.8265866637229919f,-2.00363826751709f,-0.15832051634788513f,0.05767636373639107f,0.5321109294891357f,-0.32593676447868347f,2.436944007873535f,-2.369814872741699f,2.4012961387634277f,-0.08473268896341324f,-0.03152402117848396f,-0.04355483874678612f,0.07742287218570709f,-1.8716108798980713f,0.1381376087665558f,0.00392795167863369f,-0.07512766122817993f,-1.4633091688156128f,0.3343474566936493f,-2.597665309906006f,2.09517765045166f,-1.602073311805725f,-1.200972557067871f,1.3932440280914307f,-0.4011599123477936f,-0.5751668214797974f,-0.30258965492248535f,-0.27163636684417725f,-0.3377749025821686f,-1.0814716815948486f,-0.9921945333480835f,-0.9431122541427612f,1.2839919328689575f,-0.7706644535064697f,-7.847440429031849e-06f,-0.010538669303059578f,2.164921998977661f,-3.2143146991729736f,0.3554742932319641f,0.34240758419036865f,-0.19093061983585358f,-0.7241868376731873f,1.9666281938552856f,1.203127384185791f,3.3089993000030518f,1.7075246572494507f,0.431784063577652f,-0.42256832122802734f,2.262066125869751f,-4.347748756408691f,-0.25184333324432373f,-0.3268728256225586f,-0.19181500375270844f,-0.6494271159172058f,2.6669399738311768f,1.1107572317123413f,3.9626684188842773f,2.0069737434387207f,-0.3475162088871002f,0.3949359059333801f,1.5718762874603271f,-1.8905502557754517f,0.14919805526733398f,0.11933018267154694f,0.2346019446849823f,-1.0056077241897583f,-0.10440247505903244f,1.2922465801239014f,1.8520045280456543f,-0.02102428674697876f,0.27546557784080505f,-0.3743652403354645f};
cl_mem separable_conv2d_6_internal_1_W;
float separable_conv2d_6_internal_2_W_[] = {0.11711525917053223f,0.2533043324947357f,-0.1808098554611206f,-0.022508807480335236f,-0.6649995446205139f,0.09314073622226715f,-0.003124025883153081f,0.017212042585015297f,-0.00145575066562742f,-0.013053400442004204f,0.023538049310445786f,-0.00013999752991367131f,-0.007973596453666687f,-0.0006502429023385048f,0.0026328787207603455f,-0.5550334453582764f,0.3889226019382477f,-0.11613842099905014f,0.2719026505947113f,0.3205232620239258f,0.056865300983190536f,-0.11111960560083389f,0.22497615218162537f,-0.30552172660827637f,-0.2547873556613922f,0.05941327288746834f,-0.5109447836875916f,0.046159517019987106f,0.32608509063720703f,0.09823229908943176f,0.040836017578840256f,0.022866737097501755f,-0.033735278993844986f,-0.050256337970495224f,-0.025790197774767876f,0.042403850704431534f};
cl_mem separable_conv2d_6_internal_2_W;
float separable_conv2d_6_internal_3_A_[] = {0.27369505167007446f,0.24391457438468933f,4.718572616577148f};
cl_mem separable_conv2d_6_internal_3_A;
float conv2d_11_internal_1_W_[] = {1.2337225675582886f,-0.5368690490722656f,0.7839080691337585f,-1.8163790702819824f,0.9831442832946777f,-0.17836132645606995f,-0.41197478771209717f,0.8647937774658203f,-0.019595712423324585f,0.2376221865415573f,-1.819101333618164f,-0.6625561118125916f,0.13829778134822845f,2.1014888286590576f,-0.6704091429710388f,-0.6757892966270447f,-0.43060117959976196f,-0.9187846183776855f,-1.4585297107696533f,-1.9717609882354736f,0.19287244975566864f,2.419645309448242f,1.6170377731323242f,0.49752122163772583f};
cl_mem conv2d_11_internal_1_W;
float conv2d_11_internal_2_A_[8] = {0.8776517510414124f, 4.5583577156066895f, 8.015480041503906f, 11.92713451385498f, -4.232036590576172f, -12.147608757019043f, -2.223597764968872f, -1.724505066871643f};
cl_mem conv2d_11_internal_2_A;
float separable_conv2d_7_internal_1_W_[] = {1.548062801361084f,-2.216251850128174f,-2.7716445922851562f,1.2362732887268066f,-1.4497334957122803f,-3.525010824203491f,-2.2455856800079346f,-2.553631544113159f,2.2438290119171143f,0.39201119542121887f,0.02962067350745201f,0.1088881865143776f,-2.1806747913360596f,-1.7300227880477905f,1.047615647315979f,-0.4453882873058319f,1.3217917680740356f,0.12652944028377533f,-1.3120293617248535f,-2.3613603115081787f,-0.804098904132843f,2.1904757022857666f,-1.8889930248260498f,-0.9373627305030823f,-0.5579929351806641f,-2.2818522453308105f,2.9350383281707764f,-1.4524728059768677f,2.052896738052368f,-0.7030501961708069f,0.15274196863174438f,-2.2927896976470947f,-0.6094106435775757f,-2.2079505920410156f,-2.2576544284820557f,1.5656473636627197f,-1.882603645324707f,-1.1686017513275146f,-0.2779805660247803f,-3.4910502433776855f,3.1455881595611572f,-0.26503485441207886f,-0.4886093735694885f,1.2092512845993042f,-3.182640790939331f,-0.9649010896682739f,1.459209680557251f,1.1347421407699585f,1.7696417570114136f,0.08956360816955566f,-0.37197110056877136f,-2.801466941833496f,0.1297089159488678f,1.7407803535461426f,-3.994389295578003f,-0.4747312068939209f,0.4874998927116394f,-2.1443347930908203f,1.5557279586791992f,0.733346164226532f,-0.32280489802360535f,-0.45435255765914917f,1.3396856784820557f,-2.491354465484619f,-1.458349347114563f,-1.057366132736206f,-1.7178682088851929f,0.7234858274459839f,-1.8859425783157349f,1.0585066080093384f,1.4811772108078003f,-1.0449937582015991f,1.6870588064193726f,1.906843662261963f,-0.6617699861526489f,-0.1490691900253296f,-0.6417654156684875f,0.12703992426395416f,1.630819320678711f,3.134190797805786f,1.6132839918136597f,2.5275988578796387f,2.3673291206359863f,-1.5185798406600952f,-1.20002019405365f,-0.7010043859481812f,-2.6360466480255127f,0.6053215265274048f,0.0264463871717453f,-1.4258798360824585f,-0.11943477392196655f,-0.013357534073293209f,-2.614985227584839f,-0.646449863910675f,0.032848190516233444f,0.48623114824295044f,2.685443639755249f,0.034576062113046646f,-0.8885238170623779f,-1.7196825742721558f,-0.34614622592926025f,-1.4446935653686523f,-1.414069652557373f,2.80377197265625f,-1.6705971956253052f,-4.003574371337891f,1.6407791376113892f,-1.7245808839797974f,-0.10555846989154816f,-2.162245988845825f,0.7922876477241516f,-1.283226490020752f,0.5275672674179077f,1.5098289251327515f,-0.8348711729049683f,-0.8948337435722351f,1.234192132949829f,2.0517210960388184f,0.6755258440971375f,-2.8584516048431396f,-4.111275672912598f,0.24875573813915253f,2.493535280227661f,-2.737985610961914f,3.1551077365875244f,1.1446223258972168f,-2.5881948471069336f,-2.7814881801605225f,0.2022859752178192f,-0.11102649569511414f,-0.8522990942001343f,-0.5561126470565796f,-0.801002025604248f,-1.331181287765503f,0.4950753152370453f,3.2466487884521484f,-2.8039584159851074f,-2.149118185043335f,2.2681145668029785f,-3.810641288757324f,0.2609540820121765f,0.31255248188972473f,2.4768729209899902f,-0.23779794573783875f,-0.44471150636672974f,0.5105236768722534f,-0.7129036784172058f,-0.901444137096405f,-0.563355565071106f,-0.9510207176208496f,-1.656165361404419f,-3.1545372009277344f,-0.2805224657058716f,-0.11374790966510773f,0.33699414134025574f,2.5298194885253906f,0.14613312482833862f,-1.7768638134002686f,-1.6037052869796753f,-2.4654541015625f,-0.8172561526298523f,-0.3156068027019501f,-0.8065845966339111f,0.03792892023921013f,0.0710357204079628f,-0.288400799036026f,0.30392858386039734f,2.1350090503692627f,-0.18864849209785461f,1.649653434753418f,1.1392042636871338f,-3.4384751319885254f,1.7772610187530518f,2.5912342071533203f,0.9033370018005371f,1.036616563796997f,-1.3199890851974487f,1.8363269567489624f,-1.4311342239379883f,0.5393041968345642f,2.3644442558288574f,-2.731325149536133f,-1.7195017337799072f,1.0383882522583008f,0.790166437625885f,-0.973809540271759f,-0.9301533699035645f,2.619511604309082f,-2.8514437675476074f,-2.9213626384735107f,-0.8842813968658447f,-0.48170900344848633f,2.6160647869110107f,2.3771400451660156f,3.2311835289001465f,-2.7180893421173096f,1.6489770412445068f,0.02169729769229889f,1.4376904964447021f,-0.31147629022598267f,0.5456777215003967f,-0.8056511878967285f,-2.9672908782958984f,2.8348031044006348f,2.398712635040283f,-3.2093355655670166f,-1.7354873418807983f,-2.3121790885925293f,0.9997618198394775f,1.9109853506088257f,0.8044078350067139f,1.7234063148498535f,-0.9395399689674377f,1.293508529663086f,1.9738212823867798f,-1.7896978855133057f,-2.40803861618042f,2.776880979537964f,2.8701813220977783f,-3.78238582611084f,1.3380825519561768f,1.9508028030395508f,-1.953090786933899f,-1.033887505531311f,-0.6493886113166809f,2.7011470794677734f,3.0253164768218994f,-0.625566840171814f,2.8431437015533447f,0.24761702120304108f,1.8722662925720215f,-0.4198150932788849f,0.653521716594696f,0.4529440104961395f,-3.2251415252685547f,1.1705329418182373f,3.864633798599243f,0.3077113628387451f,-2.650259256362915f,-0.4744277894496918f,0.9227535128593445f,0.5268755555152893f,2.7603228092193604f,1.9664573669433594f,-0.5743831992149353f,-0.7122158408164978f,0.9792975187301636f,-1.4823355674743652f,1.593441128730774f,2.078364849090576f,1.3004266023635864f,1.3351914882659912f,0.10875308513641357f,2.874976396560669f,-2.007992744445801f,0.23604802787303925f,-3.7945516109466553f,0.5188325643539429f,1.7103805541992188f,1.9413254261016846f,1.5921484231948853f,0.8143070340156555f,1.048987627029419f,-0.2630317211151123f,1.0642720460891724f,2.474851608276367f,-2.1193535327911377f,-0.8257194757461548f,2.509430408477783f,2.957894802093506f,-1.0247341394424438f,1.5571688413619995f,-2.7099645137786865f,-0.3107013404369354f,-1.030117392539978f,2.788466691970825f,0.9493042230606079f,-3.651890277862549f,0.5127808451652527f,0.3032709062099457f,2.711374521255493f,1.583309292793274f,-0.8133801817893982f,3.143226385116577f,-2.1576740741729736f,1.4304372072219849f,-1.4059009552001953f,1.202648401260376f};
cl_mem separable_conv2d_7_internal_1_W;
float separable_conv2d_7_internal_2_W_[] = {0.0850226879119873f,0.012308783829212189f,-0.06682948768138885f,-0.021264519542455673f,0.04470754787325859f,0.023973282426595688f,0.041652582585811615f,0.010168963111937046f,0.004260694608092308f,-0.052302565425634384f,0.011206130497157574f,-0.041105613112449646f,-0.03602752089500427f,0.01767805963754654f,0.0014535555383190513f,-0.00047140842070803046f,-0.004086220636963844f,-0.06361831724643707f,0.04088103026151657f,-0.09509037435054779f,-0.07007506489753723f,0.038681693375110626f,-0.016960225999355316f,0.00010730110079748556f,-0.020548338070511818f,0.00936770997941494f,0.01789570227265358f,0.019791387021541595f,-0.002730277832597494f,-0.016892561689019203f,-0.02071406878530979f,-0.0016456992598250508f,-0.004677399527281523f,-0.08411464840173721f,-0.016297850757837296f,-0.00239641685038805f,-0.028366951271891594f,-0.05612839758396149f,0.013598003424704075f,-0.0033240853808820248f,-0.01944095827639103f,0.03881450369954109f,0.016684843227267265f,-0.05127735435962677f,0.0027740676887333393f,-0.06633310765028f,0.003014744259417057f,0.0037220418453216553f,-0.019467489793896675f,-0.05571383610367775f,-0.028732143342494965f,0.037803273648023605f,-0.026096083223819733f,-0.021421823650598526f,-0.008535540662705898f,-0.008275877684354782f,-0.0048809717409312725f,-0.022920401766896248f,-0.043131958693265915f,0.004659911151975393f,-0.0002753772714640945f,-0.0024082523304969072f,0.07945030927658081f,-0.09349788725376129f,0.018358618021011353f,0.02770935371518135f,-0.010894076898694038f,0.01247694157063961f,-0.043503791093826294f,0.033229339867830276f,-0.006865554954856634f,-0.06782257556915283f,-0.03866392374038696f,0.011671499349176884f,0.07069431245326996f,0.028724046424031258f,0.04685462266206741f,-0.023363502696156502f,0.0046335491351783276f,-0.04618171602487564f,-0.002084064995869994f,0.047015249729156494f,-0.03462287038564682f,0.006421615369617939f,0.08912269026041031f,0.00635953014716506f,-0.001298351096920669f,0.05339154973626137f,0.01995033025741577f,0.02189723402261734f,0.04933859407901764f,-0.01186565775424242f,0.02746669389307499f,-0.023480236530303955f,0.10952223837375641f,-0.021812355145812035f,-2.3020740627544e-05f,0.02045135200023651f,-0.049429070204496384f,0.06639090180397034f,0.04947279393672943f,-0.07249976694583893f,0.015847917646169662f,0.0008655201527290046f,0.0719354972243309f,0.01887921243906021f,-0.04135006293654442f,-0.03297196328639984f,0.028632400557398796f,-0.009708095341920853f,-0.027486179023981094f,-0.04133540019392967f,0.003607226302847266f,-0.01797538809478283f,0.009021639823913574f,0.004678195808082819f,0.04276910051703453f,0.0468234121799469f,0.04197944328188896f,-0.010911290533840656f,0.0345829501748085f,-0.06085995212197304f,-0.027139820158481598f,-0.004875652026385069f,0.03759040683507919f,0.015807317569851875f,0.03657415509223938f,0.006329200696200132f,0.02603757008910179f,0.04459811747074127f,-0.0038969882298260927f,-0.013582136482000351f,0.0017839920474216342f,-0.04742540419101715f,0.03791423887014389f,0.037757694721221924f,-0.005035189911723137f,0.0637436956167221f,-0.009802503511309624f,-0.048041932284832f,-0.010547352954745293f,-0.033767443150281906f,0.04016398638486862f,0.03202447667717934f,0.0006858163978904486f,-0.07687146961688995f,0.022902410477399826f,-0.005140938330441713f,-0.006655063014477491f,-0.03530155494809151f,0.0003863763122353703f,0.020175760611891747f,-0.015459041111171246f,-0.09325696527957916f,0.012962994165718555f,-0.027425404638051987f,-0.030385686084628105f,0.04129018262028694f,-0.048220910131931305f,-0.0276580099016428f,0.011344829574227333f,-0.003944162279367447f,0.03506388142704964f,0.005826151464134455f,-0.03228886425495148f,0.00035128480521962047f,-0.020124884322285652f,0.00685804383829236f,-0.09292005747556686f,0.016250258311629295f,-0.011035504750907421f,-0.005195735953748226f,0.028111403807997704f,0.028777556493878365f,0.011777023784816265f,0.04585591331124306f,-0.010849197395145893f,-0.0030307250563055277f,0.07322359085083008f,0.03532567247748375f,-0.010921960696578026f,-0.042672041803598404f,0.06297905743122101f,0.034474778920412064f,0.04101596027612686f,0.06586092710494995f,-0.006163612939417362f,0.0026912062894552946f,-0.01825186051428318f,-0.005073961336165667f,0.03473488613963127f,0.0739658996462822f,0.07369881868362427f,0.015331488102674484f,-0.03057103417813778f,0.04305310547351837f,0.028869960457086563f,0.03703415021300316f,-0.017734406515955925f,-0.019622135907411575f,-0.019239915534853935f,-0.024873407557606697f,-0.05319619178771973f,0.0171082504093647f,0.017664412036538124f,-0.06868396699428558f,0.013330725021660328f,-0.0330607071518898f,-0.03672356903553009f,0.11314944922924042f,0.003913085907697678f,-0.04789900779724121f,-0.025007126852869987f,-0.056195154786109924f,0.002360263140872121f,0.014937065541744232f,0.13073904812335968f,0.01437913253903389f,0.001311417086981237f,-0.040433529764413834f,-0.004421801306307316f,-0.06347735226154327f,-0.0407080352306366f,-0.004051747266203165f,-0.1081906408071518f,-0.021334171295166016f,0.0268118716776371f,0.012841499410569668f,-0.01856374740600586f,-0.026383696123957634f,-0.03796606883406639f,-0.02152886427938938f,-0.02912893332540989f,0.02425752393901348f,0.01612810418009758f,-0.0015723948599770665f,0.036383289843797684f,-0.05901350826025009f,0.029541553929448128f,0.03832566738128662f,0.010899125598371029f,0.010523608885705471f,0.04597211629152298f,0.04930723085999489f,0.011696205474436283f,0.04749365150928497f,-0.0140273692086339f,0.03684195503592491f,0.00951165147125721f,0.002292531542479992f,0.06232665851712227f,0.03329428657889366f,0.02062157168984413f,0.02184336446225643f,0.050671715289354324f,0.0412437841296196f};
cl_mem separable_conv2d_7_internal_2_W;
float separable_conv2d_7_internal_3_A_[] = {2.6690454483032227f,-2.316877841949463f,2.333984136581421f,4.613631248474121f,2.1569831371307373f,1.3443984985351562f,4.243888854980469f,4.775673866271973f};
cl_mem separable_conv2d_7_internal_3_A;
float conv2d_12_internal_1_W_[] = {-0.22801849246025085f,-0.15085391700267792f,0.005934040527790785f,-0.3369589149951935f,-0.006001891568303108f,1.090105414390564f,-0.019312048330903053f,-0.12674906849861145f,-0.15954311192035675f,-1.441601276397705f,0.17918184399604797f,-0.23657798767089844f,0.7070406675338745f,0.4120873808860779f,1.04006028175354f,-0.9345585107803345f,0.010578416287899017f,0.02703070640563965f,-0.2600172460079193f,0.4656965136528015f,-0.012166219763457775f,-0.21317560970783234f,-0.4664035439491272f,0.016980964690446854f,0.3218000531196594f,0.30049991607666016f,0.5791077017784119f,0.15859447419643402f,0.2617718577384949f,-0.08939463645219803f,-0.029835935682058334f,0.6725162267684937f,0.9111301302909851f,-0.14224465191364288f,0.28819894790649414f,-0.8228069543838501f,0.31980884075164795f,-0.9613479971885681f,0.8726192712783813f,-0.7712129354476929f,0.32215169072151184f,-0.07041458785533905f,0.24606184661388397f,0.28902679681777954f,0.6229885816574097f,0.208714097738266f,0.9958667159080505f,0.35105666518211365f,0.30034691095352173f,0.008725074119865894f,-0.1102193146944046f,0.0729067325592041f,-0.041074976325035095f,0.07223308831453323f,0.07879482954740524f,-1.03032386302948f,1.4380526542663574f,-0.2503681182861328f,-0.1284436136484146f,0.2654478847980499f,0.09444640576839447f,-0.47885948419570923f,-0.7457038760185242f,1.0667496919631958f,-0.2483386993408203f,0.18178284168243408f,0.2558065354824066f,0.7175391316413879f,-0.21114584803581238f,0.06739413738250732f,0.26775744557380676f,-0.3501046895980835f,0.5921304821968079f,-0.17659415304660797f,-0.6214187741279602f,-0.005424955394119024f,0.8655960559844971f,0.27124395966529846f,-0.08184616267681122f,-0.030695199966430664f,-0.6123806238174438f,0.1926359385251999f,-0.10680820792913437f,-0.7133029699325562f,0.6428930163383484f,-0.02027667686343193f,-0.22919929027557373f,0.06665723770856857f,-0.9430825114250183f,0.1441984623670578f,-0.09820450842380524f,0.6190787553787231f,-0.6590783596038818f,-0.06539560854434967f,0.11185591667890549f,0.8238193392753601f};
cl_mem conv2d_12_internal_1_W;
float conv2d_12_internal_2_A_[] = {-3.9184770584106445f,5.991758346557617f,-2.395392894744873f,2.372906446456909f,-1.3069632053375244f,-3.9126224517822266f,6.231189727783203f,-3.3240654468536377f,-0.27708935737609863f,2.143765926361084f,-3.891724109649658f,-1.0991593599319458f};
cl_mem conv2d_12_internal_2_A;
float separable_conv2d_8_internal_1_W_[] = {0.19703133404254913f,3.1363091468811035f,2.0126843452453613f,0.9420253038406372f,3.8795289993286133f,2.1605405807495117f,-0.1196390837430954f,0.01882559433579445f,2.5435969829559326f,-1.0899280309677124f,-0.6805792450904846f,-0.2885507047176361f,-0.04460883140563965f,2.6431527137756348f,0.11530724167823792f,-2.762923240661621f,-1.5281175374984741f,-2.796219825744629f,-2.181058168411255f,0.12629489600658417f,2.6309256553649902f,1.5753005743026733f,1.774038553237915f,2.2748193740844727f,3.4210309982299805f,-0.8358546495437622f,-2.444209575653076f,-1.970278263092041f,-0.08197534829378128f,2.479623556137085f,1.500012993812561f,0.5690551996231079f,0.8659694790840149f,0.23419442772865295f,2.1632509231567383f,-0.42386069893836975f,3.281892776489258f,3.5124735832214355f,0.096463643014431f,1.0498931407928467f,0.38268548250198364f,-0.039813533425331116f,2.0485618114471436f,-0.09802821278572083f,-2.167663335800171f,0.20881107449531555f,-0.5335215330123901f,1.6778335571289062f,-0.27492502331733704f,-0.21700386703014374f,3.5447604656219482f,-0.23008720576763153f,0.9837778210639954f,-0.7772039771080017f,3.321815252304077f,-1.0249567031860352f,2.1756784915924072f,-0.876156747341156f,1.249955415725708f,-2.6009435653686523f,-0.9429377317428589f,-1.0934696197509766f,0.28912076354026794f,-3.8486804962158203f,0.5323160290718079f,-3.0932276248931885f,-0.016092604026198387f,0.04434748366475105f,-0.6703125238418579f,1.6101957559585571f,1.6118921041488647f,2.9192512035369873f,0.006542516406625509f,-0.524544358253479f,-2.6562249660491943f,-1.520585060119629f,1.351369857788086f,0.5522312521934509f,2.3312807083129883f,-3.061784267425537f,-0.6726537346839905f,0.061458442360162735f,0.7123332023620605f,-1.209479570388794f,0.5346637964248657f,-0.27628713846206665f,1.5861326456069946f,1.7789884805679321f,-0.4200267195701599f,-0.5071995258331299f,2.384483814239502f,3.2954394817352295f,-2.273939371109009f,1.6931931972503662f,-1.0868901014328003f,0.2764875292778015f,-0.6651708483695984f,-0.8296908140182495f,2.4764223098754883f,-2.622239828109741f,-1.8941211700439453f,-1.5650442838668823f,3.287904739379883f,-0.9935805201530457f,2.066768169403076f,-3.2629175186157227f,0.8656172752380371f,2.5812132358551025f,0.1332884281873703f,-1.380385160446167f,-1.0869489908218384f,-2.4413034915924072f,0.9023959636688232f,-3.3102006912231445f,1.2355412244796753f,-0.09788285940885544f,-1.2388603687286377f,-0.5609927177429199f,0.7131359577178955f,1.2602375745773315f,-2.9153034687042236f,2.983520030975342f,-0.6598953008651733f,-0.7435500025749207f,2.7479283809661865f,0.20826353132724762f,1.9968173503875732f,0.41741591691970825f,-1.5961990356445312f,-0.24413509666919708f,-0.08017276227474213f,-2.834394693374634f,0.03738754615187645f,-1.9650899171829224f,1.2383863925933838f,0.8080119490623474f,0.3848799765110016f,-0.9768593311309814f,2.6508448123931885f,2.2676990032196045f,-1.4201576709747314f,2.1678102016448975f,-0.1779274344444275f,-0.08141776919364929f,1.6160484552383423f,1.389164686203003f,1.4202619791030884f,2.8245913982391357f,1.5639349222183228f,3.0955309867858887f,-2.173931360244751f,-0.7156930565834045f,2.837130069732666f,0.7019547820091248f,2.7036800384521484f,-0.13901792466640472f,-0.5042880177497864f,3.7258291244506836f,-0.5429410338401794f,-3.037419557571411f,2.2742908000946045f,-2.2519803047180176f,-1.6693958044052124f,2.293250560760498f,0.096451535820961f,0.6332061290740967f,1.6083931922912598f,-0.664091169834137f,3.317495107650757f,-1.2155729532241821f,-0.5604994893074036f,-0.17713652551174164f,-0.3867182433605194f,0.6706902980804443f,2.2114341259002686f,1.0314668416976929f,1.523518443107605f,2.891035556793213f,1.2247735261917114f,-0.2874918580055237f,2.032118082046509f,-0.13870932161808014f,-3.6457905769348145f,2.610684394836426f,-1.8259042501449585f,2.5271189212799072f,0.29567915201187134f,-1.434112310409546f,-4.01860237121582f,-1.3232916593551636f,-0.020620418712496758f,0.8489580750465393f,0.36374956369400024f,-0.7051095962524414f,1.5880101919174194f,0.974990725517273f,-2.364171028137207f,1.5342928171157837f,0.5767838954925537f,-2.9579172134399414f,2.8563380241394043f,1.3444167375564575f,2.7648253440856934f,-2.210306167602539f,-2.2955124378204346f,-1.988732099533081f,0.6946387887001038f,-3.1201419830322266f,0.9060522317886353f,-3.0278844833374023f,-0.5307027697563171f,2.634517192840576f,-1.522731900215149f,-0.22694095969200134f,2.704303026199341f,0.965467631816864f,0.5762051343917847f,-1.2814052104949951f,0.7186533212661743f,-2.4861981868743896f,-0.17412269115447998f,-1.092948079109192f,2.400566816329956f,-1.1615997552871704f,-1.0577418804168701f,3.8263509273529053f,1.9296391010284424f,0.01883235201239586f,1.3999775648117065f,-1.7747015953063965f,-0.2047925889492035f,0.3242950141429901f,-3.051753520965576f,-0.6255223155021667f,0.8369706869125366f,-0.4556429982185364f,-4.477608680725098f,0.7638037800788879f,0.3905471861362457f,-1.6733304262161255f,1.4261566400527954f,0.7703330516815186f,0.05010085925459862f,-4.493724346160889f,-4.449168682098389f,0.16809548437595367f,2.0331125259399414f,-0.3762233853340149f,-0.19392338395118713f,-2.543956756591797f,1.4370225667953491f,-0.9859062433242798f,-2.434934139251709f,-1.2908313274383545f,-2.3734421730041504f,-1.2019225358963013f,-0.5473794937133789f,-1.3404836654663086f,1.8837273120880127f,1.4439667463302612f,-0.5084319710731506f,-2.672402858734131f,2.8017380237579346f,0.4926062524318695f,-2.7946555614471436f,3.4150516986846924f,0.587537407875061f,-1.7754155397415161f,1.892615795135498f,-3.026968479156494f,1.6496634483337402f,1.3625439405441284f,-0.5688380002975464f,1.793913722038269f,0.8362903594970703f,0.4141152799129486f,-0.6054283380508423f,-2.3507604598999023f,2.1918981075286865f,-0.22364535927772522f,-2.1320321559906006f,-3.046135663986206f,0.5674746036529541f,-0.36253684759140015f,-1.5355108976364136f,1.3846169710159302f,1.4911292791366577f,-0.7054761648178101f,-1.2920762300491333f,-2.3741044998168945f,0.6003944277763367f,2.1923460960388184f,0.805503785610199f,0.5826846361160278f,-2.477130174636841f,-1.2597960233688354f,2.841550350189209f,1.6483972072601318f,4.1291069984436035f,0.1860934942960739f,1.2858738899230957f,1.3214792013168335f,-0.4736066460609436f,-0.7116994857788086f,1.3173770904541016f,-0.8280965089797974f,0.11486819386482239f,1.6037962436676025f,-1.7397966384887695f,-2.0012145042419434f,-0.41174203157424927f,-0.17239560186862946f,0.9752627611160278f,0.023931654170155525f,2.632157325744629f,2.2308926582336426f,-1.8076958656311035f,1.2376271486282349f,2.2392494678497314f,3.028615951538086f,1.5333149433135986f,2.0205798149108887f,-1.6491789817810059f,-0.48016345500946045f,1.7495146989822388f,-1.9168893098831177f,-1.0841822624206543f,2.0321083068847656f,3.2280185222625732f,3.167174816131592f,-0.5671877861022949f,-0.6736778020858765f,-1.7793593406677246f,-1.33623206615448f,1.5894681215286255f,-0.617601215839386f,2.4901914596557617f,-1.1107186079025269f,-1.9709690809249878f,-0.3075695335865021f,-0.25244295597076416f,-0.09884447604417801f,-2.881873369216919f,-3.7700588703155518f,1.4291032552719116f,1.089676856994629f,2.1131861209869385f,1.3838223218917847f,-1.3064477443695068f,-1.1053632497787476f,3.512691020965576f,-0.2594160735607147f,-0.5400850176811218f,0.02814585156738758f,0.09373307973146439f,3.700235605239868f,-1.3841466903686523f,-1.2922945022583008f,2.950634479522705f,-3.0209786891937256f,-1.1960760354995728f,-1.928447961807251f,3.5963830947875977f,2.7552382946014404f,-3.400646448135376f,1.0076696872711182f,1.9109777212142944f,0.30974623560905457f,0.4893037974834442f,3.691582441329956f,-3.46779203414917f,1.7008289098739624f,2.3515493869781494f,-2.8113198280334473f,1.0712063312530518f,-0.9757508039474487f,2.2907838821411133f,0.36600980162620544f,-3.286940336227417f,-0.047889601439237595f,-1.7625093460083008f,-0.011977260001003742f,2.6892082691192627f,-0.37008219957351685f,2.957670211791992f,0.6028279066085815f,-1.6490970849990845f,-1.6869803667068481f,-1.7551939487457275f,-3.236985683441162f,-1.4517796039581299f,-0.15475843846797943f,-2.6316733360290527f,-0.1684064269065857f,1.408687710762024f,0.07382016628980637f,-2.9495654106140137f,-0.31453821063041687f,-0.9617347717285156f,1.0894099473953247f,-0.9309502840042114f,-0.5470292568206787f,0.4675424098968506f,2.7307591438293457f,0.3073399066925049f,-3.323167562484741f,2.1214544773101807f,-1.9387959241867065f,-0.3725792467594147f,0.4423437714576721f,2.3736648559570312f,0.8799377083778381f,-2.323061943054199f,-2.2439444065093994f,0.12072908133268356f,0.2992189824581146f,0.5200394988059998f,1.8630344867706299f,-2.3909754753112793f,2.257066249847412f,-1.0146173238754272f,-1.4900832176208496f,3.086495876312256f,1.1721194982528687f,0.7556696534156799f,-1.7375843524932861f,-2.8508498668670654f,-2.237287998199463f,-0.7648647427558899f,0.2760741710662842f,3.250595808029175f,0.24934715032577515f};
cl_mem separable_conv2d_8_internal_1_W;
float separable_conv2d_8_internal_2_W_[] = {-0.014655545353889465f,-0.03501516580581665f,-0.012122349813580513f,0.007133982609957457f,-0.01606394350528717f,0.06558192521333694f,-0.024946898221969604f,0.033984385430812836f,-0.005649808794260025f,-0.00036606425419449806f,0.03979925438761711f,-0.0004026748356409371f,-0.009856849908828735f,-0.01427550707012415f,-0.018194526433944702f,0.015777919441461563f,0.033944569528102875f,0.0016087500844150782f,-0.02389080449938774f,0.00016945730021689087f,0.0030851622577756643f,0.007041638717055321f,-0.06556276977062225f,-0.009244066663086414f,-0.11710511893033981f,-0.017241911962628365f,-0.029136493802070618f,0.019457779824733734f,-0.00812399573624134f,0.031086532399058342f,0.0014396196929737926f,0.01642031967639923f,0.017258452251553535f,0.010226016864180565f,0.002102763159200549f,0.007459807209670544f,0.0038704939652234316f,-0.011395036242902279f,-0.004174539353698492f,-0.010314896702766418f,0.023634200915694237f,-0.002714595990255475f,0.046072281897068024f,0.027121353894472122f,-0.030870268121361732f,0.07898590713739395f,-0.05963261052966118f,-0.037167854607105255f,0.041555799543857574f,0.010493497364223003f,0.036061376333236694f,0.018509885296225548f,0.001706194132566452f,0.06439092755317688f,0.011408795602619648f,0.028187498450279236f,0.028241297230124474f,-0.06226976588368416f,0.10288677364587784f,0.0026954191271215677f,0.020698508247733116f,0.04862058535218239f,-0.011669142171740532f,-0.006665326189249754f,-0.016420941799879074f,0.01618180051445961f,0.02478041872382164f,-0.02940528839826584f,-0.0338035449385643f,-0.037963367998600006f,0.051601435989141464f,0.03350569307804108f,-0.02844228968024254f,0.030044514685869217f,0.0003964200441259891f,0.004699292592704296f,0.03089274652302265f,0.015570316463708878f,0.022797325626015663f,-0.07145870476961136f,0.007000780664384365f,0.026557069271802902f,-0.06562306731939316f,-0.07100628316402435f,-0.00241519114933908f,-0.057814404368400574f,0.043256569653749466f,0.029758157208561897f,-0.019083285704255104f,0.025884106755256653f,0.011853999458253384f,-0.0069600739516317844f,0.0559120737016201f,0.011153072118759155f,0.019225258380174637f,-0.008961401879787445f,0.0070373499765992165f,-0.017132626846432686f,0.0014221025630831718f,0.07201346009969711f,0.002559376647695899f,-0.044007908552885056f,-0.005878811702132225f,0.0009245859109796584f,0.05782516673207283f,-0.04442321136593819f,0.0115481186658144f,0.01119990274310112f,-0.05709889903664589f,0.02216160297393799f,-0.0020910014864057302f,0.02924923598766327f,-0.012519759126007557f,0.02838834375143051f,-0.030255421996116638f,0.008261999115347862f,-0.04457315802574158f,-0.006029194686561823f,-0.00863288901746273f,-0.022918444126844406f,-0.03472038730978966f,-0.018550828099250793f,0.012377805076539516f,0.061067044734954834f,0.01564793474972248f,-0.04568417742848396f,-0.020610500127077103f,-0.03433523699641228f,0.024285657331347466f,-0.0053732204250991344f,-0.03257046639919281f,0.01584029570221901f,0.013758672401309013f,0.04334313049912453f,0.059858594089746475f,-0.0397556833922863f,-0.027775295078754425f,0.002008111448958516f,0.005510835442692041f,0.013520377688109875f,0.007358944974839687f,0.014421156607568264f,-0.0054419091902673244f,0.02276233769953251f,-0.048434123396873474f,-0.016000548377633095f,0.04831303656101227f,0.0023945183493196964f,0.013016648590564728f,-0.04248892515897751f,-0.02156044729053974f,0.0046770027838647366f,0.009075107984244823f,0.03205098584294319f,0.028742309659719467f,0.008737411350011826f,-0.08349057286977768f,0.023878179490566254f,-0.010928576812148094f,0.004174884874373674f,-0.03737905994057655f,-0.01608034037053585f,-0.002750458661466837f,-0.037786126136779785f,0.00781731866300106f,0.01989387907087803f,-0.02372218668460846f,-0.010078845545649529f,-0.0235124584287405f,-0.015983544290065765f,0.0258190855383873f,-0.0409742146730423f,0.035462114959955215f,-0.003895130241289735f,-0.011175866238772869f,-0.013381796889007092f,0.0068772826343774796f,-0.06298580020666122f,0.0005178871797397733f,0.001843121717683971f,-0.017550714313983917f,0.0021179369650781155f,0.011883324012160301f,-0.03676220029592514f,0.023266548290848732f,-0.05432290583848953f,-0.04692605137825012f,0.02883782982826233f,-0.04260597005486488f,-0.001118707936257124f,-0.026083430275321007f,0.016858980059623718f,0.0006981567130424082f,-0.021614762023091316f,-0.04067128896713257f,0.04143073037266731f,0.01697687618434429f,-0.0016984675312414765f,0.01503322459757328f,0.014055048115551472f,-0.0005716694868169725f,-0.025071481242775917f,0.010855036787688732f,0.02160831168293953f,-0.011095709167420864f,-0.028677701950073242f,0.06971843540668488f,0.0406016930937767f,-0.022078663110733032f,-0.034425538033246994f,-0.050448015332221985f,-0.01543515920639038f,-0.005436742678284645f,0.005451432429254055f,0.008440155535936356f,-0.024334890767931938f,0.03180113807320595f,0.01460456382483244f,0.015977706760168076f,0.0046110982075333595f,0.017572810873389244f,-0.010012502782046795f,-6.478872819570825e-05f,-0.00470093684270978f,-0.023440010845661163f,0.009697437286376953f,-0.021448874846100807f,-0.02874891832470894f,-0.01139130163937807f,0.012417538091540337f,-0.07387806475162506f,-0.06654827296733856f,0.01051385048776865f,0.005666518118232489f,0.0183784868568182f,0.037889719009399414f,0.017055058851838112f,-0.02487252838909626f,0.00824142899364233f,-0.03160223364830017f,0.02995956502854824f,-0.00805932842195034f,0.0006842256407253444f,0.050910674035549164f,0.019303331151604652f,-0.005534165073186159f,0.010451653972268105f,0.0213784072548151f,0.024474862962961197f,-0.032594505697488785f,-0.011116650886833668f,-0.02838301844894886f,0.018814004957675934f,0.002041708678007126f,-0.00531628867611289f,0.09533414989709854f,0.008900538086891174f,0.002313187811523676f,0.025715958327054977f,0.0068649365566670895f,-0.03186752274632454f,0.001073732622899115f,0.02520161308348179f,-0.027210185304284096f,0.04548746347427368f,-0.02967577613890171f,0.023953232914209366f,-0.04248453304171562f,-0.00721129821613431f,-0.01844804733991623f,0.002523848321288824f,-0.03991929069161415f,0.016229115426540375f,0.03430865705013275f,0.017587073147296906f,0.04596542567014694f,0.02401932142674923f,-0.023447584360837936f,0.04658392816781998f,0.02496281825006008f,-0.004735994152724743f,0.008403371088206768f,0.0373157374560833f,0.03541328385472298f,-0.011820816434919834f,0.021992865949869156f,0.03467385843396187f,0.029695618897676468f,-0.010896586813032627f,-0.006039659958332777f,0.01026027463376522f,-0.05133833363652229f,0.07348882406949997f,-0.005078732967376709f,0.01165513414889574f,-0.005970933940261602f,0.020966514945030212f,-0.0383024662733078f,-0.07708826661109924f,0.025812149047851562f,0.007901964709162712f,0.008623210713267326f,-0.02538388967514038f,0.023310808464884758f,-0.053489696234464645f,-0.024473337456583977f,-0.04065472260117531f,0.007006647065281868f,-0.0018075690604746342f,0.036612097173929214f,0.010967663489282131f,-0.005561777390539646f,0.03536570072174072f,0.029449965804815292f,-0.0013037328608334064f,0.01189575344324112f,-0.006930116564035416f,0.07682101428508759f,0.004127293825149536f,0.0064261737279593945f,0.07062913477420807f,0.051123250275850296f,0.03277069330215454f,-0.01707950048148632f,0.0059630488976836205f,0.06884829699993134f,-0.002909022383391857f,-0.0002951286151073873f,0.01604633405804634f,0.0376049168407917f,0.021179452538490295f,-0.016577987000346184f,0.003161684377118945f,-0.03394399210810661f,0.010206609033048153f,-0.03856965899467468f,-0.025900518521666527f,0.00819387286901474f,0.01533646509051323f,0.03540235385298729f,0.02090436778962612f,-0.03231840953230858f,0.03900431469082832f,0.04282034561038017f,-0.02441476844251156f,-0.02921999804675579f,0.05010581016540527f,-0.005528774578124285f,-0.02845713309943676f,0.05188170075416565f,0.0016765871550887823f,-0.05378230661153793f,0.01599612832069397f,-0.03234877064824104f,-0.019331881776452065f,0.004565151408314705f,-0.0024971100501716137f,0.027879131957888603f,-0.03210756555199623f,0.007628095336258411f,-0.011395983397960663f,-0.018225107342004776f,0.005600770935416222f,-0.040534794330596924f,-0.05735981836915016f,0.03901897370815277f,0.027098368853330612f,-0.0005568669294007123f,-0.03295721486210823f,0.01644965261220932f,-0.011870414018630981f,0.04106103628873825f,0.018535034731030464f,-0.0050775231793522835f,-0.013812482357025146f,-0.04342878237366676f,0.007593807298690081f,0.026954859495162964f,-0.025393705815076828f,-0.019042663276195526f,-0.01750379428267479f,-0.06205802783370018f,7.30449246475473e-05f,0.005555938929319382f,-0.03701835498213768f,0.03627800568938255f,0.0031370630022138357f,-0.007631346117705107f,-0.014216795563697815f,-0.0013934256276115775f,-0.010392310097813606f,-0.003801457118242979f,0.004253629129379988f,-0.024005116894841194f,-0.0014797437470406294f,0.003424873575568199f,0.018586574122309685f,-0.050126153975725174f,0.025491084903478622f,0.005890457425266504f,-0.021145986393094063f,-0.02776038832962513f,-0.04260984808206558f,-0.003748372895643115f,-0.009015051648020744f,0.0053032576106488705f,-0.05015379190444946f,0.06934826076030731f,-0.009178237989544868f,0.016581598669290543f,-0.012216812931001186f,0.03342109173536301f,0.0028784549795091152f,0.020444652065634727f,0.0042280335910618305f,-0.029083818197250366f,-0.03886253759264946f,0.06345999240875244f,-0.014563518576323986f,-0.044558558613061905f,-0.05490191653370857f,-0.002140827476978302f,0.010196171700954437f,-0.03635535016655922f,0.015672393143177032f,0.0029795581940561533f,-0.015957387164235115f,0.02474634163081646f,0.012070892378687859f,-0.002665620995685458f,0.03583627566695213f,0.016146419569849968f,-0.04137161001563072f,-0.011722019873559475f,0.01632457785308361f,0.002949500223621726f,-0.000340096972649917f,-0.021117011085152626f,-0.00516720674932003f,-0.020781604573130608f,0.005377032328397036f,0.07951606810092926f,0.058466389775276184f,-0.005097200628370047f,0.0011069637257605791f,-0.012757415883243084f,-0.019077276811003685f,0.048059605062007904f,0.01683775708079338f,-0.003928210120648146f,0.01170352939516306f,0.03406237065792084f,-0.04932761192321777f,0.0013846132205799222f,-0.027096034958958626f,-0.059653330594301224f,0.026271408423781395f,0.05080980807542801f,0.01419954001903534f,-0.048044394701719284f,-0.014690159820020199f,0.0027389947790652514f,-0.0401468425989151f,-0.04207939654588699f,0.008573630824685097f,-0.03327072411775589f,-0.017155122011899948f,0.0067468672059476376f,-0.01802886836230755f,-0.01623186282813549f,0.027949994429945946f,-0.012911722995340824f,-0.030850794166326523f,0.0006107672234065831f,0.005727590527385473f,0.0013578191865235567f,0.00014119234401732683f,0.021678805351257324f,0.07774636149406433f,-0.0028303167782723904f,0.06069811433553696f,0.04108724743127823f,-0.019462348893284798f,-0.003852357156574726f,0.0038996345829218626f,0.012329289689660072f,-0.027764305472373962f,-0.08057049661874771f,-0.02836564928293228f,-0.004682065919041634f,-0.01206974033266306f,-0.019600359722971916f,0.0281679704785347f,-0.04793420806527138f,0.007523042149841785f,-0.005875703878700733f,0.0573778860270977f,0.014917425811290741f,-0.001889531034976244f,-0.03766511380672455f,-0.005623830482363701f,-0.016603032127022743f,-0.06393080204725266f,-0.01635134406387806f,-0.023779748007655144f,0.032817576080560684f,-0.005185561720281839f,-0.04568354785442352f,0.012181430123746395f,-0.017892636358737946f,0.013916485011577606f,0.04767537862062454f,-0.03271535038948059f,4.6641747758258134e-05f,-0.05085551738739014f,0.05751962214708328f,-0.037625569850206375f,0.021952887997031212f,-0.022573497146368027f,0.00831771083176136f,-0.0043530575931072235f,-0.01701553352177143f,0.010458826087415218f,-0.010274219326674938f,-0.05520673468708992f,0.038460731506347656f,-0.021666068583726883f,-0.001039335853420198f,-0.001573236077092588f,-0.014106984250247478f,0.11195169389247894f,0.03334243595600128f,-0.023080701008439064f,-0.014496196061372757f,-0.041891973465681076f,-0.02405194565653801f,-0.0281413272023201f,0.025689424946904182f,-0.012495153583586216f,-0.002834585029631853f,0.032415617257356644f,0.01726238615810871f,-0.04824661836028099f,-0.009343702346086502f,0.01727788895368576f,0.00886955950409174f,0.015852633863687515f,-0.019620496779680252f,-0.0051626055501401424f,0.02576194889843464f,-0.033956378698349f,0.0129399998113513f,-0.03633682057261467f,0.020779071375727654f,-0.038064055144786835f,-0.07109811902046204f,0.02058798260986805f,-0.025478174909949303f,-0.014169921167194843f,0.006876192055642605f,0.009004630148410797f,-0.0141085684299469f,-0.027215061709284782f,-0.022291578352451324f,0.00896480306982994f,0.012963307090103626f,0.02169160172343254f,-0.02148929424583912f,-0.0020967505406588316f,0.015464570373296738f,0.00754134263843298f,-0.019352635368704796f,0.011479402892291546f,-0.02721741795539856f,0.01768147200345993f,0.015772826969623566f};
cl_mem separable_conv2d_8_internal_2_W;
float separable_conv2d_8_internal_3_A_[] = {-1.351807951927185f,0.17123140394687653f,2.6706109046936035f,3.375772476196289f,1.3431499004364014f,-2.667370080947876f,2.031101942062378f,0.5079312920570374f,-0.14286531507968903f,-1.6840389966964722f,0.18071593344211578f,-3.01713228225708f};
cl_mem separable_conv2d_8_internal_3_A;
float conv2d_13_internal_1_W_[] = {0.35868796706199646f,-0.27102842926979065f,-0.29265323281288147f,-0.16593651473522186f,-0.06275127828121185f,-2.046501874923706f,0.29256147146224976f,0.1076178178191185f,-0.5728719830513f,-0.1203746348619461f,0.1074814721941948f,-0.09509492665529251f,0.9184263944625854f,-0.6143966317176819f,-0.022965945303440094f,-0.21574467420578003f,0.10122301429510117f,-0.6176154613494873f,0.013064396567642689f,0.6203314065933228f,0.1464630663394928f,0.871808648109436f,-0.14411966502666473f,-0.025519924238324165f,-0.6113870143890381f,-0.15407171845436096f,0.10475264489650726f,0.27696752548217773f,0.17165924608707428f,-0.1394290030002594f,-0.0167220551520586f,0.6501451730728149f,1.1147392988204956f,-0.20999567210674286f,0.10863558948040009f,-0.016031287610530853f,0.3292669355869293f,-0.25543561577796936f,-0.027261408045887947f,-0.03654012084007263f,-0.19363930821418762f,-0.2609967887401581f,-0.41647276282310486f,0.847889244556427f,-0.20163604617118835f,0.04812357574701309f,-0.11523512005805969f,-0.5888074636459351f,0.03938494995236397f,0.14987599849700928f,0.8978552222251892f,0.056843385100364685f,-0.3631918430328369f,-0.6762703061103821f,-0.05421335995197296f,-0.1234579086303711f,-0.07097259163856506f,0.594804048538208f,0.2514784038066864f,-0.07615627348423004f,0.5511193871498108f,0.3169167637825012f,-0.10071099549531937f,-0.01607232540845871f,-0.19674009084701538f,0.46299055218696594f,-0.7200143337249756f,0.4073526859283447f,0.2139810025691986f,-0.3961566984653473f,0.02002352848649025f,-0.04051961377263069f,0.37145525217056274f,-0.28579986095428467f,-0.5940200686454773f,-0.10886828601360321f,0.12989754974842072f,-0.7534192800521851f,-0.19656144082546234f,-0.16767717897891998f,-0.15345965325832367f,-0.13242733478546143f,-0.6464446783065796f,-0.47226983308792114f,0.18876305222511292f,-0.37216758728027344f,0.27709975838661194f,-0.2939985692501068f,-0.127628892660141f,-0.16212241351604462f,0.11864849179983139f,0.050471484661102295f,-0.07857867330312729f,-0.6513773202896118f,-0.5617181062698364f,0.363092839717865f};
cl_mem conv2d_13_internal_1_W;
float conv2d_13_internal_2_A_[] = {1.665850043296814f,2.4876861572265625f,0.4738490879535675f,1.4769498109817505f,-0.5221161842346191f,3.5820412635803223f,5.503252029418945f,1.7201601266860962f};
cl_mem conv2d_13_internal_2_A;
float separable_conv2d_9_internal_1_W_[] = {-4.334543228149414f,2.801626443862915f,1.441052794456482f,-0.15047796070575714f,0.7162637114524841f,0.1720612347126007f,-1.9966256618499756f,-1.62892484664917f,-1.8081895112991333f,1.2929620742797852f,1.0718554258346558f,1.5284298658370972f,0.2021465301513672f,4.35023832321167f,-3.1304707527160645f,1.4620803594589233f,1.3239741325378418f,2.9792492389678955f,-0.6198993921279907f,-4.063994407653809f,4.794114589691162f,1.1463497877120972f,3.0920183658599854f,-1.1973247528076172f,-2.827146530151367f,3.052150011062622f,-0.138605535030365f,-3.3865468502044678f,0.32305043935775757f,-1.2251359224319458f,-3.2059459686279297f,2.9735114574432373f,0.9933087229728699f,0.23167501389980316f,-1.4336647987365723f,1.9461723566055298f,-0.009715715423226357f,1.109588623046875f,-3.9660205841064453f,-2.7964119911193848f,-3.582824230194092f,0.8637760877609253f,-0.7338307499885559f,-0.11590742319822311f,-0.18550017476081848f,1.0648829936981201f,-1.1295541524887085f,-0.2382746934890747f,0.5043168067932129f,-1.978219985961914f,-3.2551779747009277f,-0.9918434023857117f,2.9971296787261963f,-1.8646976947784424f,0.7393286228179932f,1.1281737089157104f,-0.4378044307231903f,1.3672221899032593f,0.18176744878292084f,-1.7446197271347046f,1.7251880168914795f,-1.6321508884429932f,0.3613784611225128f,2.9588639736175537f,-0.07509268075227737f,1.5724461078643799f,-3.0198006629943848f,4.012067794799805f,0.020461175590753555f,1.4809229373931885f,0.3282203674316406f,0.8905429244041443f,-2.454042911529541f,0.21879665553569794f,1.9875582456588745f,-0.9951924085617065f,-2.145427942276001f,-2.957451820373535f,-3.338265895843506f,0.11700507998466492f,1.7277394533157349f,2.6703245639801025f,-2.181166887283325f,0.5436244010925293f,-0.40572577714920044f,2.7107017040252686f,-3.552532911300659f,1.8986122608184814f,-0.9796539545059204f,-1.165025234222412f,-0.8713183403015137f,-2.7077176570892334f,-2.032287836074829f,1.4640710353851318f,-3.324514150619507f,-0.4382127523422241f,1.0848816633224487f,1.3072890043258667f,0.5842060446739197f,1.1591968536376953f,-0.19559359550476074f,0.37300288677215576f,1.5636470317840576f,-1.0043668746948242f,-2.8433046340942383f,1.0853675603866577f,-0.5127050280570984f,-0.02641717903316021f,3.2484090328216553f,0.4621734023094177f,-0.34183457493782043f,1.938674807548523f,-0.3120616376399994f,1.2963155508041382f,0.9393023252487183f,-3.4028220176696777f,0.7190799117088318f,1.205819010734558f,0.6258448362350464f,-0.9991961121559143f,-3.067953109741211f,0.8412560224533081f,3.5851032733917236f,1.7551246881484985f,1.3108586072921753f,-0.3128458261489868f,-2.672614574432373f,-1.9232943058013916f,0.0803712010383606f,0.20131359994411469f,-0.5308547019958496f,-2.1968231201171875f,-1.717671513557434f,0.7099736928939819f,-0.35624372959136963f,-0.9813205599784851f,-0.4001898169517517f,-1.2765544652938843f,0.6387389898300171f,-1.0090683698654175f,1.5428153276443481f,-0.27175527811050415f,1.5102453231811523f,-0.7179620862007141f,0.06478384882211685f,0.7396500110626221f,-2.5052711963653564f,-2.1412370204925537f,1.9405194520950317f,-1.2855396270751953f,-1.3831535577774048f,1.332008719444275f,1.8142244815826416f,0.07723931968212128f,2.9686686992645264f,-1.9999957084655762f,0.7126289010047913f,1.2538225650787354f,-1.331970453262329f,-2.4775891304016113f,-1.8420323133468628f,0.7848359942436218f,-2.0372190475463867f,-1.0865976810455322f,1.8116931915283203f,1.6373661756515503f,-0.04575434327125549f,1.5634171962738037f,-0.4214284121990204f,-0.9232025742530823f,2.495056390762329f,-0.9717749953269958f,0.3958474099636078f,-0.755881130695343f,-2.519656181335449f,-2.103649616241455f,-0.9224978089332581f,1.215575933456421f,0.806011974811554f,1.7967805862426758f,-0.010655364021658897f,2.1809284687042236f,-0.46715331077575684f,-1.2317721843719482f,0.2710559070110321f,0.2908429801464081f,-0.3120405972003937f,-0.24994632601737976f,-2.7345101833343506f,-2.153635025024414f,0.02605191059410572f,0.07295205444097519f,-0.4404609799385071f,-2.319993734359741f,3.5338194370269775f,2.92935848236084f,4.317873954772949f,-2.7195351123809814f,2.1766297817230225f,-3.197175979614258f,-2.178666591644287f,-2.682586431503296f,-2.596181631088257f,2.7824044227600098f,4.140439987182617f,0.2947966158390045f,-0.6090677380561829f,-2.1753432750701904f,-2.169442892074585f,-2.1736490726470947f,2.0803020000457764f,-0.31068095564842224f,-2.5607261657714844f,2.7187228202819824f,2.350585699081421f,-0.36675649881362915f,1.0316684246063232f,4.135097503662109f,-1.0940275192260742f,2.363826274871826f,2.246962785720825f,-2.598782539367676f,-3.1139256954193115f,-1.126621127128601f,-1.6930631399154663f,-3.6106553077697754f,-0.5283313989639282f,1.1660141944885254f,-1.976677417755127f,2.6274631023406982f,2.454324722290039f,-1.9336861371994019f,0.37230658531188965f,-3.439704179763794f,0.4030802249908447f,0.9216281771659851f,1.4577945470809937f,-1.0322810411453247f,0.39345747232437134f,-0.3495918810367584f,-2.7156782150268555f,0.16327109932899475f,-0.758440375328064f,-0.4357503056526184f,-1.5235435962677002f,1.5069949626922607f,1.3987791538238525f,-0.6133500337600708f,1.2908560037612915f,3.329540967941284f,-0.15420860052108765f,-0.33719402551651f,-0.06725236028432846f,-2.5206105709075928f,-0.08890824019908905f,-0.4680604338645935f,0.8759975433349609f,-0.48402708768844604f,-2.1708602905273438f,0.3275195360183716f,2.2094240188598633f,1.258233666419983f,0.8219800591468811f,1.718188762664795f,-1.6771496534347534f,-2.710829973220825f,-1.2432746887207031f,-3.9771366119384766f,-0.10165117681026459f,-0.6638393402099609f,-1.9070262908935547f,-2.208712577819824f,-1.7287278175354004f,1.1646618843078613f,1.8783169984817505f,0.9257560968399048f,-0.2759362459182739f,-1.1036021709442139f,-1.6448378562927246f,-2.3590548038482666f,1.9530545473098755f,0.35794758796691895f,3.0428411960601807f,0.5049022436141968f,-2.303959846496582f,-1.8678410053253174f,1.1691558361053467f,0.8657667636871338f};
cl_mem separable_conv2d_9_internal_1_W;
float separable_conv2d_9_internal_2_W_[] = {0.013700839132070541f,0.004453133326023817f,-0.020589634776115417f,-0.008663441985845566f,0.010893654078245163f,-0.005366544704884291f,-0.008550943806767464f,-0.0574059896171093f,-0.020021751523017883f,-0.02394990250468254f,0.0022322337608784437f,-0.024337520822882652f,0.037633396685123444f,-0.05085531622171402f,0.022703416645526886f,0.014476497657597065f,0.01162309292703867f,0.04516736790537834f,0.04859016463160515f,-0.03837466984987259f,0.002199329901486635f,0.0010562940733507276f,-0.027262771502137184f,0.014660113491117954f,-0.06607995927333832f,-0.030935043469071388f,0.002092176815494895f,0.026833072304725647f,-0.0281472560018301f,-0.028835643082857132f,-0.0241243913769722f,0.0027730027213692665f,-0.005855536554008722f,-0.022296328097581863f,0.010058430954813957f,-0.06242939829826355f,-0.02308661676943302f,0.059032220393419266f,0.004796876572072506f,0.006908959709107876f,0.013187181204557419f,-0.025928189978003502f,0.01833018846809864f,0.02548307552933693f,0.04360438138246536f,0.009409158490598202f,0.020501529797911644f,0.013797564432024956f,-0.041676536202430725f,-0.007258512545377016f,-0.005141942296177149f,-0.0271676667034626f,-0.022612228989601135f,-0.043237704783678055f,0.026121899485588074f,0.043723128736019135f,-0.018282949924468994f,0.00542097445577383f,0.032406456768512726f,0.02572506107389927f,-0.030418897047638893f,-0.016549551859498024f,0.03765115141868591f,-0.03587588667869568f,-0.0016501809004694223f,0.018779540434479713f,-0.029367994517087936f,0.08754433691501617f,-0.008991354145109653f,0.004409782122820616f,-0.022392475977540016f,0.011244968511164188f,0.053467389196157455f,0.018711550161242485f,0.02432859130203724f,0.053667932748794556f,-0.044454175978899f,-0.01714545488357544f,-0.001725529320538044f,0.003953069914132357f,-0.011784744448959827f,-0.019414126873016357f,0.0031056711450219154f,-0.040810875594615936f,-0.029510829597711563f,-0.007710862439125776f,-0.0025599622167646885f,0.033871907740831375f,0.03975902870297432f,0.0335850715637207f,-0.03495701402425766f,-0.0050850966945290565f,0.016662297770380974f,-0.05536447465419769f,-0.00687576737254858f,-0.009208659641444683f,0.02394811436533928f,-0.005669631063938141f,-0.009989584796130657f,0.046218883246183395f,-0.04737560823559761f,-0.04583758860826492f,-0.023989617824554443f,-0.021558677777647972f,-0.013857584446668625f,-0.0068960487842559814f,-0.057347800582647324f,0.017621217295527458f,0.01390575896948576f,0.0023474465124309063f,-0.044097937643527985f,-0.014800009317696095f,0.01170939952135086f,-0.011393926106393337f,-0.011904124170541763f,0.03362715616822243f,0.032124318182468414f,-0.022335562855005264f,0.016697514802217484f,0.06700461357831955f,-0.03546490520238876f,-0.015207311138510704f,-0.04168852046132088f,0.02367137372493744f,-0.00021934126561973244f,0.025077834725379944f,-0.0023179815616458654f,0.016096170991659164f,0.03754120320081711f,-0.006024692673236132f,-0.00828959047794342f,-0.036458708345890045f,-0.03842512518167496f,-0.004173553083091974f,0.017778273671865463f,0.0028314145747572184f,0.006513570435345173f,-0.02743879333138466f,0.005187918432056904f,0.02651091106235981f,-0.0013401536270976067f,-0.08609803020954132f,0.006797569338232279f,-0.005355623550713062f,-0.008276336826384068f,0.02357235923409462f,-0.002042400185018778f,0.0017573286313563585f,0.03476817533373833f,-0.005695097614079714f,0.0032242033630609512f,0.06649377197027206f,0.028432445600628853f,-0.0025742813013494015f,-0.014381078071892262f,0.037485867738723755f,-0.010843314230442047f,0.05812281370162964f,-0.029371242970228195f,0.04348239302635193f,-0.046643856912851334f,0.0495438352227211f,0.04620392993092537f,-0.0440664142370224f,-0.017187979072332382f,-0.0037167530972510576f,-0.008028700947761536f,-0.03722936660051346f,-0.006633145734667778f,0.0502442792057991f,-0.041646238416433334f,0.021611742675304413f,0.025861095637083054f,0.019243117421865463f,0.0024686262477189302f,-0.01094310823827982f,0.03546612337231636f,0.0004011464770883322f,-0.006729127839207649f,0.006455650087445974f,0.029406370595097542f,-0.04692583531141281f,0.013354122638702393f,-0.06006716936826706f,-0.0019724578596651554f,-0.007701629772782326f,0.02776692621409893f,-0.03342592716217041f,0.002130107721313834f,-0.016937103122472763f,0.0012667186092585325f,0.04129457473754883f,0.0041693635284900665f,0.04017205536365509f,0.019600385800004005f,-0.013476531952619553f,0.029795575886964798f,0.0016431099502369761f,0.03524577617645264f,-0.002139219082891941f,-0.053218014538288116f,-0.02435912936925888f,0.028584398329257965f,0.06423386186361313f,0.013391918502748013f,0.02098868414759636f,0.010265135206282139f,0.017819879576563835f,0.007804159540683031f,-0.013566154055297375f,0.055124808102846146f,-0.0014825074467808008f,0.008752444759011269f,-0.024471478536725044f,7.282282604137436e-05f,0.05478711798787117f,0.01210694294422865f,0.04228525608778f,-0.046039044857025146f,0.004815602209419012f,-0.009449624456465244f,0.03781166300177574f,0.020496783778071404f,0.04138880968093872f,0.038244158029556274f,-0.01621464639902115f,0.05869431421160698f,-0.008722607046365738f,0.012601342983543873f,-0.010888590477406979f,0.0052536483854055405f,-0.009089397266507149f,-0.02101161703467369f,0.003263773862272501f,0.01367173157632351f,0.021340947598218918f,-0.01851949468255043f,0.05415309965610504f,0.022766444832086563f,-0.04284264147281647f,0.019817739725112915f,-0.015829160809516907f,-0.016245197504758835f,0.010508992709219456f,-0.0011125636519864202f,0.08175394684076309f,0.03954724222421646f,0.019532011821866035f,-0.020166046917438507f,-0.012060829438269138f,0.028883496299386024f,0.05799700692296028f,0.014270051382482052f,0.0016101973596960306f,-0.00025226472644135356f,0.04586277902126312f};
cl_mem separable_conv2d_9_internal_2_W;
float separable_conv2d_9_internal_3_A_[] = {5.948148250579834f,6.619079113006592f,-3.2185771465301514f,0.6230137944221497f,0.7017412185668945f,3.57230281829834f,3.560560941696167f,2.518810749053955f};
cl_mem separable_conv2d_9_internal_3_A;
float conv2d_14_internal_1_W_[] = {-0.08348123729228973f,0.8603626489639282f,-0.9870794415473938f,0.5600653290748596f,0.5944861173629761f,-0.2696220278739929f,-0.16452783346176147f,-0.47571346163749695f,-0.0015741055831313133f,-0.30578187108039856f,0.576249897480011f,-0.3525470197200775f,0.23952171206474304f,-0.39552828669548035f,0.3514642119407654f,-0.2157803475856781f,0.28023168444633484f,-0.47604551911354065f,0.20431657135486603f,-1.3823583126068115f,0.33942651748657227f,-0.7985326647758484f,-0.16427363455295563f,0.34975123405456543f,0.031115975230932236f,-0.27917608618736267f,0.1403050720691681f,-0.43795421719551086f,-0.5481854677200317f,0.1332477331161499f,-0.19653257727622986f,0.38408327102661133f,-0.6416747570037842f,0.7903652787208557f,0.09026358276605606f,-0.7082244753837585f,-0.4024477005004883f,-0.4337349236011505f,-0.2347850203514099f,0.43079903721809387f,-0.23052717745304108f,-0.5865474939346313f,0.5650697350502014f,0.24857714772224426f,0.05019421502947807f,-0.7413932085037231f,0.15169095993041992f,-0.4375283420085907f,-0.6181290149688721f,0.6059494614601135f,0.1252421885728836f,-0.5843226909637451f,0.1058102399110794f,0.5872410535812378f,-0.14108820259571075f,-0.15409192442893982f,0.6302091479301453f,-0.13268858194351196f,-0.21774674952030182f,0.3466479182243347f,-0.5418252348899841f,-0.8095543384552002f,-0.010765948332846165f,0.4149579405784607f,0.1776563823223114f,-0.08125976473093033f,-0.9654192924499512f,-0.0684346929192543f,0.10369733721017838f,-0.363529771566391f,1.342883586883545f,0.18576617538928986f,-0.060009490698575974f,-0.9062544107437134f,-0.7191448211669922f,0.13731960952281952f,-0.3809191584587097f,1.0321433544158936f,-0.32625457644462585f,0.38915377855300903f,0.7164619565010071f,0.1284148246049881f,-1.0977518558502197f,-0.943219006061554f,0.13586771488189697f,-0.1900159865617752f,0.21776701509952545f,-0.2570338845252991f,-0.46245917677879333f,0.39390531182289124f,-0.640002965927124f,0.6878246068954468f,-0.23707939684391022f,-0.17782069742679596f,-0.08472640812397003f,0.11575547605752945f,-0.24860069155693054f,-0.47700613737106323f,0.6338993906974792f,-0.058674659579992294f,-0.09266471862792969f,0.43163758516311646f,0.5501257181167603f,-0.25096848607063293f,-0.9915515780448914f,-0.2477521449327469f,0.7256782054901123f,-0.1504921168088913f,-0.7620567083358765f,-0.4169858992099762f,0.11357023566961288f,0.041441209614276886f,-0.3948673605918884f,0.009184282273054123f,0.3252047002315521f,-0.08893880248069763f,0.3156801164150238f,-0.13118545711040497f,-0.16494382917881012f,-0.3159082531929016f,-0.301550954580307f,0.7702488303184509f,-0.6955270767211914f,-0.13039793074131012f,0.20678012073040009f,0.43921536207199097f,1.2939053773880005f,0.9536348581314087f};
cl_mem conv2d_14_internal_1_W;
float conv2d_14_internal_2_A_[] = {1.6544382572174072f,-3.418708562850952f,2.449916362762451f,4.321150779724121f,2.531395435333252f,3.1889147758483887f,-3.072141647338867f,2.490493059158325f,4.311921119689941f,0.57691490650177f,-0.6817185282707214f,2.33056640625f,4.947483062744141f,0.37411177158355713f,-4.1750383377075195f,-6.007083892822266f};
cl_mem conv2d_14_internal_2_A;
float separable_conv2d_10_internal_1_W_[] = {1.065657615661621f,-0.28620314598083496f,4.304813385009766f,0.8026471734046936f,1.352878212928772f,1.6706008911132812f,-0.7726849913597107f,3.6238749027252197f,-1.4902604818344116f,-2.2950141429901123f,-2.639482021331787f,1.6163336038589478f,-1.8155821561813354f,-0.7102206945419312f,1.7976757287979126f,-1.2487910985946655f,-2.9120049476623535f,3.4199373722076416f,0.16975028812885284f,-1.8596694469451904f,-3.2140965461730957f,-2.221212148666382f,1.1648383140563965f,-0.8806406259536743f,-0.12584297358989716f,-1.434818148612976f,1.95541250705719f,2.545670747756958f,2.8740620613098145f,1.4330804347991943f,0.9853661060333252f,-3.815049171447754f,-1.3285683393478394f,-4.309861660003662f,1.6215862035751343f,-0.5523708462715149f,2.6852335929870605f,2.5750935077667236f,1.3120942115783691f,2.038416862487793f,1.92245352268219f,3.931180953979492f,0.5920288562774658f,-0.5172094106674194f,-3.1426050662994385f,-1.467668890953064f,-2.3148603439331055f,-1.3408591747283936f,0.5146694779396057f,1.2085105180740356f,-3.607440233230591f,0.1858433037996292f,-2.827740430831909f,-1.3428598642349243f,1.7503899335861206f,0.667598307132721f,4.910004138946533f,3.256875514984131f,-0.5376443266868591f,0.6264378428459167f,1.0105608701705933f,0.5906450152397156f,3.0469727516174316f,3.98685884475708f,0.991392195224762f,0.6768561005592346f,2.851200580596924f,-1.9687315225601196f,0.03369888290762901f,3.702341318130493f,2.187058687210083f,0.6417253613471985f,-0.8752861022949219f,-2.3785431385040283f,-2.9767229557037354f,-1.3485795259475708f,-3.297255039215088f,1.2053587436676025f,0.2896524667739868f,0.08789705485105515f,-0.8890011310577393f,2.7368392944335938f,-0.32462847232818604f,1.2224671840667725f,-1.0654062032699585f,-2.4629416465759277f,2.0699117183685303f,-0.7809399366378784f,-0.548634946346283f,2.586045265197754f,3.5019583702087402f,-1.9663091897964478f,2.1974310874938965f,1.5883753299713135f,-0.1532890796661377f,0.015585125423967838f,0.32796207070350647f,-0.9639483094215393f,0.3638104200363159f,1.7951061725616455f,2.6699771881103516f,0.29132869839668274f,0.206538587808609f,0.5324535369873047f,-0.1832854002714157f,1.9662925004959106f,-1.9469261169433594f,-1.9345850944519043f,0.4133729040622711f,0.08271373063325882f,1.6817437410354614f,-1.9176641702651978f,0.692630410194397f,1.5776598453521729f,1.019090175628662f,-1.100851058959961f,-0.7671971321105957f,0.37409988045692444f,0.3450740575790405f,-0.35165661573410034f,2.5892844200134277f,1.300039529800415f,-0.6043821573257446f,-3.3816206455230713f,0.2865738868713379f,1.0716416835784912f,0.7031199932098389f,2.6163294315338135f,-0.06683097034692764f,-0.8005163073539734f,2.1028029918670654f,1.61997652053833f,2.0116937160491943f,2.066936731338501f,-3.4140238761901855f,-0.7901755571365356f,-0.1800634115934372f,0.577857255935669f,-3.3009402751922607f,-0.8065090179443359f,-2.1779136657714844f,-2.7258238792419434f,1.3567227125167847f,-1.9691762924194336f,-0.06998924911022186f,0.32107242941856384f,-1.9211574792861938f,0.5480564832687378f,-1.5030282735824585f,-3.179657220840454f,3.2151951789855957f,1.9669991731643677f,-1.6357100009918213f,-3.916520118713379f,-0.7830274105072021f,-1.8033102750778198f,1.7032331228256226f,1.3641364574432373f,-2.854752779006958f,-1.913991928100586f,-1.070289134979248f,2.6385538578033447f,3.1421658992767334f,2.1782312393188477f,1.2780016660690308f,-0.6762576103210449f,1.2778970003128052f,1.196908712387085f,-3.5542471408843994f,0.4122311472892761f,3.2752437591552734f,-0.5492414832115173f,-0.8792363405227661f,0.23404182493686676f,-3.233163595199585f,-0.683472216129303f,-0.2927306592464447f,2.001011371612549f,-1.011331558227539f,-1.5621223449707031f,-0.4288462698459625f,-1.4529134035110474f,-2.8351337909698486f,-1.9353899955749512f,1.1485719680786133f,0.30872198939323425f,-0.7007998824119568f,-2.961060047149658f,0.6071317791938782f,-0.21100738644599915f,-2.87365984916687f,3.812502384185791f,0.824804961681366f,1.8864402770996094f,0.4221593141555786f,4.081758499145508f,3.6191976070404053f,-0.8493334650993347f,1.1988741159439087f,0.5315779447555542f,1.0921939611434937f,-0.9133011102676392f,-0.9935199618339539f,3.81895112991333f,0.10618508607149124f,1.3970890045166016f,1.6314418315887451f,-1.5792292356491089f,1.2990174293518066f,-0.8322870135307312f,2.3456292152404785f,-0.7572863101959229f,2.511474847793579f,1.180662751197815f,1.680707573890686f,0.5036880970001221f,2.8347973823547363f,-0.9299092292785645f,0.5606619715690613f,1.2601937055587769f,2.8391435146331787f,-0.626438558101654f,2.2627992630004883f,2.120507001876831f,2.6612391471862793f,0.3632535934448242f,1.0479938983917236f,0.7708101272583008f,-2.0903103351593018f,2.5357158184051514f,1.5302722454071045f,1.854928731918335f,-0.16662470996379852f,2.4429843425750732f,-1.9938969612121582f,3.9684338569641113f,-1.4481085538864136f,-3.3318378925323486f,-0.17759889364242554f,-0.507046103477478f,3.6648571491241455f,-0.5246922373771667f,-2.2288153171539307f,1.1888518333435059f,-1.4566155672073364f,4.319042682647705f,0.1275862753391266f,0.025296926498413086f,0.7706775665283203f,2.8025007247924805f,3.204913854598999f,1.3544747829437256f,-1.9137552976608276f,2.505490303039551f,2.3466267585754395f,1.1701722145080566f,1.7967652082443237f,2.7419967651367188f,0.055770568549633026f,1.2516496181488037f,1.7485886812210083f,0.725436270236969f,3.11826229095459f,0.24444909393787384f,1.0144208669662476f,0.4421217441558838f,-0.9828184843063354f,2.789780855178833f,-0.9750567674636841f,2.5970799922943115f,0.055904727429151535f,-1.1893306970596313f,1.7473288774490356f,0.3379881680011749f,1.9305373430252075f,1.0144214630126953f,0.6322542428970337f,2.3593313694000244f,1.4079251289367676f,-1.803166389465332f,1.625380516052246f,1.8030834197998047f,3.9878528118133545f,-0.4828077256679535f,1.5145663022994995f,2.9183125495910645f,-1.4294358491897583f,1.7986801862716675f,-0.9671728610992432f,1.1919686794281006f,0.7003324627876282f,-0.4023095369338989f,0.45830947160720825f,0.7239064574241638f,2.5903000831604004f,1.4056934118270874f,0.8885946869850159f,0.7748011946678162f,1.0579760074615479f,-0.5907270312309265f,1.0406920909881592f,-1.7760810852050781f,2.520251989364624f,-1.0117735862731934f,0.7696146965026855f,0.7822943925857544f,2.2604410648345947f,2.3860154151916504f,-1.4854487180709839f,0.4499768316745758f,-3.4595727920532227f,0.16544410586357117f,-1.2952343225479126f,2.2585036754608154f,1.4560742378234863f,-2.037712812423706f,-2.18377423286438f,1.9530386924743652f,0.9542546272277832f,1.6556190252304077f,2.5153634548187256f,1.3785206079483032f,0.026566315442323685f,-0.3500879406929016f,4.576671123504639f,-0.4454447031021118f,0.2659984827041626f,0.3859636187553406f,0.7342873215675354f,-1.519855260848999f,0.11908532679080963f,0.35834285616874695f,0.20840108394622803f,0.038333408534526825f,1.0437818765640259f,-2.000958204269409f,4.377365589141846f,0.11036089062690735f,1.1656315326690674f,0.7292794585227966f,-0.25751373171806335f,2.143958806991577f,1.243423581123352f,1.6878631114959717f,-1.2762788534164429f,-2.9139673709869385f,1.5083601474761963f,0.4500229060649872f,-0.5613596439361572f,2.4770138263702393f,0.1728828102350235f,1.519134521484375f,-1.0325764417648315f,0.8643431067466736f,1.2372900247573853f,-0.6036853194236755f,-1.5204026699066162f,0.3218930959701538f,2.5001134872436523f,0.7840615510940552f,-2.906841516494751f,1.5928428173065186f,-0.08510484546422958f,0.5152276158332825f,-1.2972989082336426f,1.2372328042984009f,0.03233366832137108f,-1.0351632833480835f,1.5828816890716553f,1.388486385345459f,0.8970596194267273f,0.6621713042259216f,-1.9285210371017456f,-0.8343803882598877f,-0.9792150259017944f,-0.3274412751197815f,-1.1183629035949707f,0.5064911842346191f,-0.18487951159477234f,-0.16063719987869263f,-3.0684611797332764f,-0.2461395561695099f,-1.0138790607452393f,0.6190484166145325f,1.3432165384292603f,-2.232855796813965f,0.6420706510543823f,2.5502285957336426f,-1.5571521520614624f,1.2743144035339355f,-0.9389266967773438f,3.791161060333252f,-2.421065092086792f,2.829679250717163f,-2.431792736053467f,1.014912486076355f,0.6547166109085083f,-0.678688108921051f,-2.014331579208374f,-3.9891769886016846f,-2.3501033782958984f,-2.7518978118896484f,0.02977757714688778f,1.5303454399108887f,1.007746934890747f,0.18484854698181152f,-1.1565765142440796f,0.5801683664321899f,-1.4317446947097778f,-0.1006755530834198f,0.45594000816345215f,3.8508412837982178f,-2.7266602516174316f,2.788318395614624f,2.2407069206237793f,-1.0445992946624756f,-0.8734354376792908f,1.612034797668457f,3.813798427581787f,-2.743237018585205f,-2.4401345252990723f,4.861854553222656f,-0.13474664092063904f,-2.811790943145752f,2.5125088691711426f,-1.8878872394561768f,0.8539184927940369f,1.499705195426941f,-2.353700637817383f,-0.3258458375930786f,0.3335821032524109f,4.570444107055664f,2.479097604751587f,-1.9926038980484009f,-1.5014758110046387f,-3.489877700805664f,2.798828125f,3.7363979816436768f,1.5783437490463257f,3.540161609649658f,-0.6758102178573608f,3.4840879440307617f,0.6628884673118591f,1.5984257459640503f,1.8714170455932617f,5.541822910308838f,-0.42052581906318665f,0.0852200835943222f,1.6223479509353638f,-1.6331584453582764f,0.9162922501564026f,-1.01483154296875f,-1.3681544065475464f,3.408224105834961f,-0.8416343331336975f,-1.1215566396713257f,2.381702184677124f,2.391693115234375f,-2.7739346027374268f,-0.03675412759184837f,-0.45221954584121704f,-0.4969651997089386f,-3.6377713680267334f,-2.6635985374450684f,-3.014024019241333f,-1.561894178390503f,1.533911943435669f,2.3544864654541016f,-2.135028839111328f,2.321382761001587f,-0.4844170808792114f,-1.1109881401062012f,-0.08117970824241638f,1.0538239479064941f,-0.051572903990745544f,0.5285608172416687f,-0.2745789885520935f,1.324289083480835f,-0.2912786900997162f,0.32780057191848755f,0.06575870513916016f,-0.03862923011183739f,0.483532577753067f,-1.051956057548523f,-0.08150510489940643f,3.649116039276123f,3.223313570022583f,-3.0579721927642822f,0.41636326909065247f,-1.8018652200698853f,-1.8011548519134521f,-0.5691545605659485f,-1.968912959098816f,1.9518553018569946f,0.1467556357383728f,2.0588011741638184f,0.1299816370010376f,-1.3780330419540405f,1.3480501174926758f,-0.6799486875534058f,2.5521156787872314f,-1.3693604469299316f,-1.1921688318252563f,3.0872585773468018f,-1.9873875379562378f,2.741438388824463f,-1.3773088455200195f,-0.22421424090862274f,-1.3585244417190552f,4.232523441314697f,-1.6362683773040771f,-2.0358924865722656f,2.7823703289031982f,-1.8795645236968994f,-0.0867178738117218f,-0.8920701146125793f,0.19050097465515137f,0.9129714965820312f,-4.719247817993164f,-0.2229824662208557f,0.14926357567310333f,-1.5018199682235718f,-0.1665186882019043f,0.46130672097206116f,0.9691271185874939f,-2.4173741340637207f,0.08392532169818878f,-3.8453478813171387f,0.03436686098575592f,-1.0069952011108398f,-4.181433200836182f,2.8585610389709473f,-1.9419996738433838f,1.1504000425338745f,-2.1631600856781006f,1.8589534759521484f,-2.043931245803833f,1.2433146238327026f,-1.4220036268234253f,1.2476446628570557f,0.19725699722766876f,0.6304904818534851f,0.37615901231765747f,-0.4392150938510895f,2.2572081089019775f,-0.2687475383281708f,0.6243575215339661f,-0.18324820697307587f,0.5325007438659668f,-0.8775525093078613f,3.01666259765625f,-4.534332752227783f,-2.1851346492767334f,-1.2285593748092651f,-1.6568065881729126f,-1.0635802745819092f,-3.5632638931274414f,2.502149820327759f,1.402840256690979f,-0.5658503770828247f,2.876713991165161f,-3.025885820388794f,1.241064190864563f,-1.8298803567886353f,0.6555896401405334f,-0.5425617098808289f,-1.0843485593795776f,2.207409143447876f,-1.3444558382034302f,0.7839310765266418f,-0.4749717712402344f,-0.30605247616767883f,0.06555385142564774f,-0.1879214197397232f,-3.0198960304260254f,4.772063732147217f};
cl_mem separable_conv2d_10_internal_1_W;
float separable_conv2d_10_internal_2_W_[] = {0.030555400997400284f,-0.06485714018344879f,-0.029465870931744576f,0.004059304483234882f,-0.04195983335375786f,-0.014074335806071758f,-0.013395356014370918f,0.0008083864813670516f,0.014889654703438282f,-0.021701151505112648f,0.02122846245765686f,-0.0226692333817482f,0.017779462039470673f,0.02867945469915867f,-0.0041031744331121445f,-0.030545353889465332f,0.0013863269705325365f,-0.08347328007221222f,-0.0021782114636152983f,-0.003221265273168683f,0.021199213340878487f,-0.0072120437398552895f,-0.018225083127617836f,-0.023343229666352272f,-0.01666124537587166f,0.03704089671373367f,-0.011038112454116344f,-0.01205338817089796f,-0.005058002192527056f,-0.03457345440983772f,0.017277374863624573f,0.016491448506712914f,0.035043396055698395f,-0.0042852554470300674f,-0.006313906516879797f,-0.006675529759377241f,-0.035162363201379776f,-0.022518664598464966f,-0.04002763330936432f,0.023813731968402863f,0.009108391590416431f,-0.00416087731719017f,-0.07009822875261307f,0.0027913886588066816f,0.04543289169669151f,0.002917394507676363f,0.017353883013129234f,-0.010322646237909794f,-0.0010042493231594563f,-0.07238739728927612f,-0.0019306736066937447f,0.028547924011945724f,0.018416909500956535f,-0.03642623499035835f,-0.009324156679213047f,-0.00784359872341156f,0.03496586158871651f,-0.020676758140325546f,0.03782428428530693f,0.052857980132102966f,0.02096666768193245f,0.022023849189281464f,-0.0009817403042688966f,-0.006147629115730524f,-0.033588822931051254f,-0.030775558203458786f,0.013117396272718906f,-0.042385321110486984f,-0.009849585592746735f,0.00774008734151721f,0.0023774506989866495f,-0.007346883416175842f,0.029002800583839417f,-0.026269445195794106f,0.01846046932041645f,-0.032064516097307205f,0.0037471370305866003f,-0.04562655836343765f,-0.022960077971220016f,0.05206659436225891f,0.015789328143000603f,-0.04033483564853668f,0.0030194949358701706f,0.0022144829854369164f,-0.01954391971230507f,0.008580426685512066f,-0.0009679783834144473f,-0.01000977586954832f,-0.007413121405988932f,-0.05138235539197922f,0.05436480790376663f,-0.028557220473885536f,-0.049076542258262634f,-0.0038129875902086496f,0.03450194373726845f,0.035871390253305435f,0.0038317935541272163f,0.03398057818412781f,-0.024739345535635948f,0.0007175499340519309f,-0.007971124723553658f,-0.005700519774109125f,0.04571056365966797f,0.018606536090373993f,0.06826853007078171f,0.007677100133150816f,0.0025002395268529654f,0.05414846912026405f,-0.0382298044860363f,-0.007557474076747894f,-0.024510817602276802f,0.017336299642920494f,-0.02147500589489937f,-0.007689194288104773f,-0.0033696338068693876f,0.014873409643769264f,-0.01700257696211338f,0.04009243845939636f,0.019376030191779137f,-0.025767987594008446f,-0.005919905379414558f,-0.017873410135507584f,0.02015438675880432f,-0.05233796313405037f,-0.020692085847258568f,0.050020165741443634f,0.005064486991614103f,0.029103538021445274f,-0.017339881509542465f,0.025532979518175125f,0.011290851049125195f,0.015983182936906815f,0.04388962313532829f,0.040201373398303986f,-0.019844289869070053f,0.005909664090722799f,-0.011926429346203804f,-0.005739589221775532f,0.01798238418996334f,0.015491850674152374f,0.004826800897717476f,-0.03609896078705788f,-0.011706353165209293f,-0.010945070534944534f,0.004944040440022945f,0.009909864515066147f,0.007229818496853113f,0.0063323588110506535f,-0.07588206231594086f,0.052222512662410736f,-0.01121976226568222f,-0.00614389032125473f,-0.027585377916693687f,0.000992831657640636f,0.0008390583680011332f,-0.029896624386310577f,0.034939028322696686f,-0.023636894300580025f,0.0003187177935615182f,-0.04128551855683327f,0.027426129207015038f,0.014497186988592148f,-0.023045072332024574f,-0.006697162054479122f,0.02359270490705967f,0.023395752534270287f,-0.028168484568595886f,0.029061324894428253f,0.006420779973268509f,0.008677340112626553f,-0.03702676668763161f,0.008917907252907753f,0.008087591268122196f,0.01191116776317358f,0.030176695436239243f,-0.062010426074266434f,-0.03118904121220112f,0.045872557908296585f,-0.0013078843476250768f,0.0050614215433597565f,0.0012410841882228851f,-0.023869458585977554f,0.012769459746778011f,-0.009953755885362625f,0.00019241048721596599f,-0.02658805064857006f,-0.02655775658786297f,-0.03307400643825531f,-0.03456825390458107f,-0.03341728821396828f,-0.013997821137309074f,0.03052501380443573f,-0.016147535294294357f,-0.033615391701459885f,-0.010852756910026073f,0.00667450949549675f,-0.05708913877606392f,-0.04154995083808899f,-0.025030406191945076f,0.009942741133272648f,-0.007472699042409658f,-0.021338138729333878f,0.0011286167427897453f,0.034052398055791855f,0.015016852878034115f,0.0269608236849308f,-0.004509385209530592f,0.005930320825427771f,-0.014757754281163216f,0.017258567735552788f,0.014527264051139355f,-0.01480567641556263f,-0.03916536644101143f,0.004476847127079964f,0.0102104302495718f,-0.05495397746562958f,0.028433475643396378f,0.028927983716130257f,0.004340811632573605f,-0.020557722076773643f,0.006442241836339235f,0.04517502337694168f,-0.026895049959421158f,0.01040828786790371f,0.011267442256212234f,0.0029248103965073824f,0.012688001617789268f,-0.00540694035589695f,0.008131368085741997f,0.030749142169952393f,-0.028293168172240257f,0.0005916965310461819f,0.0045599183067679405f,0.01946812868118286f,0.07264423370361328f,-0.0525815449655056f,0.015009171329438686f,-0.032698359340429306f,-0.018977142870426178f,0.03331490233540535f,-0.028013423085212708f,-0.04101784527301788f,-0.007228937931358814f,-0.010211439803242683f,0.023680023849010468f,-0.010936734266579151f,-0.015683095902204514f,0.0007973311003297567f,-0.0016606852877885103f,0.005353276152163744f,0.04323827102780342f,0.013986198231577873f,-0.025394190102815628f,0.05387461185455322f,-0.01350647397339344f,0.0730818659067154f,0.030771875753998756f,-0.03764611482620239f,0.009360391646623611f,0.00791163556277752f,0.03474804013967514f,0.03986404836177826f,-0.011276841163635254f,0.028428958728909492f,-0.025166112929582596f,-0.01851465180516243f,0.05420847609639168f,-0.02626645565032959f,-0.004389828070998192f,0.007874147966504097f,0.051153115928173065f,-0.03229673206806183f,0.0008244794444181025f,-0.0010903235524892807f,-0.011669517494738102f,-0.027232110500335693f,-0.008893143385648727f,0.0027914957609027624f,-0.025140253826975822f,0.055071718990802765f,-0.010642456822097301f,0.013761491514742374f,-0.09683071821928024f,0.023413341492414474f,0.002921388018876314f,-0.04681339114904404f,-0.019052496179938316f,-0.008960103616118431f,0.003241713158786297f,0.012270329520106316f,-0.06213640794157982f,0.021979115903377533f,0.08498302102088928f,0.004863003734499216f,0.00047373533016070724f,-0.014713694341480732f,-0.032620228826999664f,0.011328808031976223f,0.06227736920118332f,0.006320497952401638f,-0.015653762966394424f,-0.019405167549848557f,0.0028452558908611536f,-0.0066115641966462135f,-0.02666504867374897f,-0.012839211151003838f,0.031842950731515884f,0.00778123177587986f,-0.10445433109998703f,0.007702826987951994f,0.013096235692501068f,0.01959824189543724f,-0.025982098653912544f,-0.008462952449917793f,-0.009286658838391304f,0.0031142891384661198f,-0.027219649404287338f,0.012690246105194092f,-0.0037925448268651962f,0.01730632223188877f,-0.007163539528846741f,-0.015348182059824467f,-0.017745446413755417f,-0.00823733676224947f,-0.01630515046417713f,-0.01071242243051529f,-0.05230317264795303f,0.015579160302877426f,0.00916442833840847f,-0.02464999444782734f,0.010713674128055573f,0.03208819031715393f,0.0381082184612751f,0.029492126777768135f,0.0022710568737238646f,-0.037688180804252625f,-0.013017880730330944f,0.07632814347743988f,-0.022074243053793907f,-0.003769669448956847f,-0.015265069901943207f,0.00914943590760231f,-0.05418296903371811f,0.023725833743810654f,0.004785653669387102f,0.0008330698474310338f,0.008276672102510929f,-0.020887363702058792f,0.0008863917319104075f,-0.009837835095822811f,0.00905871856957674f,0.029335757717490196f,-0.00811762921512127f,-0.022021960467100143f,0.00531350914388895f,0.01720966212451458f,0.014310085214674473f,0.07460186630487442f,0.03501350060105324f,0.024869542568922043f,-0.001863859943114221f,0.004235356114804745f,-0.010131245478987694f,0.0012750554597005248f,-0.0071871415711939335f,0.01114200334995985f,0.005027278792113066f,-0.004656188655644655f,0.011130975559353828f,0.0037293077912181616f,0.009738101623952389f,-0.0015464510070160031f,0.006616935133934021f,-0.004180191084742546f,0.014447410590946674f,0.022220803424715996f,-0.027317194268107414f,-0.05355792120099068f,0.022621488198637962f,0.0011094801593571901f,-0.039352938532829285f,-0.031243419274687767f,0.023105548694729805f,0.0013534605968743563f,0.026646239683032036f,-0.012738006189465523f,-0.02741178497672081f,-0.009714691899716854f,0.0011551410425454378f,0.006318464409559965f,-0.006347233429551125f,0.018612168729305267f,-0.004502398427575827f,0.028354274109005928f,0.02486732229590416f,0.009449077770113945f,-0.021327443420886993f,0.060084082186222076f,-0.006661790423095226f,-0.020301692187786102f,0.029435472562909126f,0.006486230995506048f,-0.031661711633205414f,-0.0013159195659682155f,0.01261878665536642f,0.01788865216076374f,-0.019534144550561905f,0.013583602383732796f,0.011755540035665035f,-0.049576535820961f,0.05820964649319649f,0.05787742882966995f,-0.04351705685257912f,-0.028243185952305794f,0.011964418925344944f,0.010644422844052315f,0.027515800669789314f,-0.037428636103868484f,0.020504701882600784f,-0.002209031954407692f,-0.017405597493052483f,-0.05307533219456673f,0.013574146665632725f,0.012033146806061268f,0.027477022260427475f,0.0028026339132338762f,-0.0033797186333686113f,0.03354392945766449f,0.024248508736491203f,0.005715507082641125f,-0.018719708546996117f,-0.03790026530623436f,0.028520606458187103f,0.0074600898660719395f,0.026546016335487366f,0.011368532665073872f,-0.01604943349957466f,0.009397853165864944f,-0.022962266579270363f,0.04579918831586838f,0.02323181740939617f,0.04532038792967796f,0.0248628631234169f,-0.03906117007136345f,0.023162847384810448f,-0.05428365617990494f,0.0032666996121406555f,-0.008437100797891617f,-0.024161318317055702f,-0.04284678399562836f,-0.001536153838969767f,-0.028793124482035637f,0.0656663328409195f,0.006021109875291586f,0.009971768595278263f,-0.01096681784838438f,-0.010949970223009586f,0.005948623176664114f,-0.06283164024353027f,-0.038422051817178726f,-0.04319136589765549f,0.03664081543684006f,0.010464680381119251f,0.008441859856247902f,-0.025976907461881638f,-0.05167529359459877f,-0.0010444798972457647f,0.015710918232798576f,-0.014182617887854576f,0.014937414787709713f,-0.02654276415705681f,-0.02249324321746826f,0.030241185799241066f,-0.008372741751372814f,-0.037906013429164886f,-0.008135552518069744f,-0.0055899592116475105f,0.0552215613424778f,0.0069016083143651485f,0.0049773952923715115f,0.01754903607070446f,-0.00023398773919325322f,-0.023085957393050194f,0.021488426253199577f,-0.01810283027589321f,-0.015974976122379303f,-0.012941735796630383f,0.052904654294252396f,0.007368499878793955f,0.02167896367609501f,-0.062321893870830536f,0.0011659694137051702f,-0.03596324101090431f,-0.011638540774583817f,0.010383276268839836f,-0.006885482929646969f,0.01442127674818039f,0.025437314063310623f,0.028679072856903076f,0.030107222497463226f,0.04083964228630066f,0.03342009708285332f,-0.002369555877521634f,-0.010946223512291908f,0.023580575361847878f,-0.036367788910865784f,-0.003645101562142372f,-0.017650295048952103f,0.019921112805604935f,-0.036432310938835144f,0.0294162780046463f,0.0022388743236660957f,0.01075887493789196f,-0.0030630226247012615f,-0.012802607379853725f,0.03824868053197861f,0.007996076717972755f,-0.015955762937664986f,0.020974447950720787f,0.004570066928863525f,0.024991657584905624f,0.005964558105915785f,-0.02251654677093029f,-0.02048804983496666f,0.00621423963457346f,0.0001878439070424065f,0.012559476308524609f,0.017589516937732697f,-0.01826353929936886f,-0.015075965784490108f,0.05938003212213516f,0.006557290442287922f,0.03474241495132446f,0.030679399147629738f,0.032853882759809494f,-0.003878752700984478f,-0.011821145191788673f,-0.0011355499736964703f,-0.0001779514568625018f,-0.015214608050882816f,-0.04633580520749092f,-0.024724872782826424f,-0.012539909221231937f,0.0021629235707223415f,-0.023284416645765305f,-0.017277074977755547f,-0.014650825411081314f,-0.011512089520692825f,-0.027464043349027634f,0.027548616752028465f,0.0009192227153107524f,-0.02646079659461975f,0.0030881345737725496f,-0.040013331919908524f,-0.030289169400930405f,-0.042692799121141434f,-0.03839833289384842f,0.03950756415724754f,0.02883019670844078f,0.013773508369922638f,0.007870662026107311f,-0.05004056170582771f,0.00012217053154017776f,-0.02482518181204796f,-0.03247595578432083f,-0.006418550852686167f,0.007083095144480467f,0.017813893035054207f,-0.014836912043392658f,0.012091089971363544f,-0.025304798036813736f,0.01684696227312088f,-0.021914102137088776f,-0.02909080870449543f,0.016201704740524292f,0.01709763891994953f,0.012155705131590366f,0.007068476639688015f,-0.023215023800730705f,-0.015081607736647129f,-0.061088677495718f,-0.008496333844959736f,0.028691047802567482f,-0.02993866428732872f,0.026315994560718536f,0.0070747630670666695f,-0.005159037187695503f,0.03262792527675629f,0.014610666781663895f,0.0054349638521671295f,-0.03775368630886078f,0.013198483735322952f,0.00019605820125434548f,-0.01374516636133194f,-0.014896674081683159f,0.02620074339210987f,0.023570599034428596f,-0.01072370819747448f,0.00015609097317792475f,0.03478652611374855f,-0.009341608732938766f,0.033647798001766205f,0.005629030521959066f,-0.05160260945558548f,0.0750947892665863f,-0.060833919793367386f,0.012035542167723179f,0.004525951575487852f,0.02854747697710991f,-0.006611056625843048f,-0.01921943575143814f,0.019150419160723686f,-0.018411967903375626f,0.025974594056606293f,0.007840580306947231f,0.05647755041718483f,-0.0021361226681619883f,0.045604731887578964f,-0.03583132475614548f,0.03613001108169556f,0.017040520906448364f,-0.019067415967583656f,0.0010319772409275174f,-0.012374943122267723f,-0.014961803331971169f,-0.02575766295194626f,0.008108998648822308f,-0.06140407919883728f,-0.007686737459152937f,0.04117467999458313f,0.03171190619468689f,-0.030122021213173866f,0.01700541190803051f,-0.011709866113960743f,0.038838814944028854f,-0.026947934180498123f,0.0019659956451505423f,-0.03171389922499657f,-0.007417139131575823f,-0.04666456952691078f,-0.000491834303829819f,0.020370230078697205f,-0.05263029783964157f,0.009989635087549686f,0.03431166335940361f,-0.04430742561817169f,-0.0032206308096647263f,0.016893330961465836f,-0.008971081115305424f,-0.017029233276844025f,0.005446474067866802f,0.030362455174326897f,-0.00675432663410902f,0.05823459103703499f,-0.024837005883455276f,0.0021602760534733534f,0.021384896710515022f,0.011777779087424278f,0.016018427908420563f,-0.0023369190748780966f,0.01737297885119915f,-0.02007000334560871f,0.0027741449885070324f,-0.00015347462613135576f,0.07219641655683517f,0.027267765253782272f,0.017630741000175476f,0.021371841430664062f,0.04844722896814346f,0.013096488080918789f,-0.020958036184310913f,-0.03412489965558052f,0.009541601873934269f,-0.007259825244545937f,0.014752660878002644f,0.04525287076830864f,0.09168557822704315f,0.007602902594953775f,0.015006139874458313f,0.005262832622975111f,-0.0017243819311261177f,-0.021756455302238464f,-0.0002911468327511102f,-0.004994907882064581f,-0.004889379255473614f,-0.03132275491952896f,0.0078078811056911945f,0.01492311991751194f,-0.03633398190140724f,0.0008900903631001711f,-0.037059079855680466f,0.013737458735704422f,0.024010498076677322f,-0.0020333651918917894f,-0.021667534485459328f,-0.023672576993703842f,0.00993512012064457f,0.017468107864260674f,0.013975934125483036f,0.018779747188091278f,0.034149765968322754f,0.01970224268734455f,0.028301764279603958f,-0.010401809588074684f,-0.010564945638179779f,0.008927902206778526f,0.02123074419796467f,0.012368414551019669f,0.0457993820309639f,0.017832081764936447f,-0.015194621868431568f,-0.006836072541773319f,0.014000635594129562f,0.03048924170434475f,0.003582642413675785f,0.019950877875089645f,-0.005617658607661724f,0.08886118978261948f,-0.0404055193066597f,-0.0015619284240528941f,0.012279580347239971f,0.017401384189724922f,0.013447516597807407f,0.007162961643189192f,-0.033829230815172195f,-0.023111136630177498f,-0.018315879628062248f,0.011431016959249973f,-0.015852713957428932f,-0.008382714353501797f,-0.03439537063241005f,0.06580705940723419f,-0.0308170598000288f,-0.03727128356695175f,-0.026507912203669548f,0.01678130403161049f,0.004402336198836565f,0.008588450029492378f,-0.014890382066369057f,0.017740117385983467f,-0.08493222296237946f,-0.01952793262898922f,0.008899607695639133f,0.010686004534363747f,0.015887107700109482f,0.036715079098939896f,0.038690149784088135f,0.042316194623708725f,0.02945176139473915f,0.01577349193394184f,-0.0029994118958711624f,-0.03054339997470379f,-0.026188943535089493f,0.040231604129076004f,-0.03577185422182083f,-0.0036919477861374617f,-0.053629305213689804f,-0.04279293492436409f,-0.03147144988179207f,-0.009419362060725689f,-0.006251379381865263f,-0.019917750731110573f,-0.024760788306593895f,-0.011066173203289509f,0.03204546123743057f,0.0066665601916611195f,-0.0023144041188061237f,0.015185197815299034f,0.0009872342925518751f,-0.008292377926409245f,-0.007676140870898962f,0.0007472727447748184f,0.02384137734770775f,0.012749376706779003f,0.004488538950681686f,0.0165390782058239f,-0.014058049768209457f,-0.009875076822936535f,-0.05343060940504074f,-0.05310621112585068f,-0.02300899848341942f,0.07064387202262878f,0.02463652566075325f,-0.01640712469816208f,0.001205161097459495f,-0.017452292144298553f,-0.010500830598175526f,0.014613860286772251f,0.02663942240178585f,-0.04717151075601578f,0.0295394454151392f,-0.036196041852235794f,-0.016049064695835114f,-0.013104088604450226f,-0.024433204904198647f,0.0029754536226391792f,-0.016168631613254547f,-0.030744643881917f,0.02320631593465805f,0.01857874169945717f,0.0007205557194538414f,-0.024766147136688232f,0.02543380856513977f,0.004843388218432665f,-0.01364074181765318f,0.018294190987944603f,-0.005067196674644947f,0.0023022901732474566f,-0.022657735273241997f,0.059468064457178116f,0.013644985854625702f,0.05133824422955513f,-0.0306572113186121f,0.012041706591844559f,-0.02831854857504368f,0.0256443340331316f,-0.008920620195567608f,-0.0013832331169396639f,0.009172787889838219f,0.0013009515823796391f,0.024721981957554817f,-0.04995989799499512f,-0.028155894950032234f,-0.0005108822952024639f,-0.008219724521040916f,0.0321095772087574f,-0.058338094502687454f,0.009780019521713257f,0.01003673393279314f,-0.01171182468533516f,0.01965641975402832f,0.02867249771952629f,-0.009568569250404835f,-0.014163237996399403f,0.017540303990244865f,0.015042886137962341f,-0.018984513357281685f,-0.0051657832227647305f,0.011737698689103127f,0.03310341387987137f,0.008110438473522663f,0.037776391953229904f,-0.0511675626039505f,0.005118170753121376f,0.004351267125457525f,-0.03314132243394852f,0.014582276344299316f,-0.0672670379281044f,0.02303590439260006f,0.014615543186664581f,-0.04230600595474243f,-0.023488059639930725f,-0.015232542529702187f,0.01570866070687771f,-0.03103623539209366f,0.01873667724430561f,0.037309590727090836f,0.012687337584793568f,-0.022875206544995308f,-0.03316519036889076f,0.04521455988287926f,0.02487950772047043f,0.005589600652456284f,-0.03045443259179592f,-0.01022961363196373f,-0.03317075967788696f,0.0067475964315235615f,0.030627353116869926f,-0.046848904341459274f,-0.0397106297314167f,0.003854417474940419f,0.0019059769110754132f,-0.034336455166339874f,-0.021484220400452614f,0.04946887865662575f,-0.027816161513328552f,0.03732231631875038f,0.007752402685582638f,0.008411581628024578f,-0.02021939679980278f,0.009008001536130905f,0.01105451863259077f,-0.03543340414762497f,-0.008057808503508568f,-0.008542776107788086f,0.01556177157908678f,-0.010429737158119678f,-0.0026342717465013266f,0.03689001128077507f,0.02709265984594822f,-0.030255278572440147f,0.0059903524816036224f,-0.016167936846613884f,-0.004859948065131903f,0.034984394907951355f,-0.07967396080493927f,-0.01840713620185852f,-0.0007493161829188466f,0.002487470395863056f,-0.013780278153717518f,0.03314775228500366f,0.0021787327714264393f,0.028059937059879303f,0.07563021779060364f,-0.003842103760689497f,0.009765364229679108f,-0.011748564429581165f,-0.04496900737285614f,0.020948166027665138f,-0.03489851579070091f,-0.01669333688914776f,-0.017435342073440552f,0.021724794059991837f,0.014807485044002533f,0.021484851837158203f,0.01883704401552677f,-0.0018516691634431481f,-0.06121049448847771f,0.01176881231367588f,0.05193877965211868f,0.010620255954563618f,-0.010769807733595371f,-0.009350388310849667f,-0.020573217421770096f,0.020935440436005592f,-0.0020053284242749214f,0.0409359447658062f,0.0006754919304512441f,-0.009304551407694817f,0.014249322935938835f,-0.018256090581417084f,-0.007761048153042793f,0.0058684200048446655f,-0.036400314420461655f,-0.01718207821249962f,-0.004713747184723616f,-0.024439753964543343f,0.02895110286772251f,0.00614346656948328f,-0.029731478542089462f,0.027568649500608444f,0.027661681175231934f,0.030299579724669456f,0.012875473126769066f,-0.004389968700706959f,-0.002244476927444339f,-0.01690305955708027f,0.009403828531503677f,-0.032934535294771194f,0.03975311666727066f,-0.024886226281523705f,-0.034129973500967026f,0.007438570726662874f,0.013413364067673683f,-0.013207673095166683f,-0.07369423657655716f,0.011516395024955273f,-0.0180627703666687f,0.008853529579937458f,0.017515480518341064f,-0.008899138309061527f,-0.020495252683758736f,0.03264345973730087f,0.028722358867526054f,-0.010698037222027779f,0.014095227234065533f,0.03672454506158829f,0.006665348075330257f,-0.03410804644227028f,-0.0008952009957283735f,0.02442026697099209f,-0.027207080274820328f,-0.0059327357448637486f,0.014909639954566956f,0.008604727685451508f,0.027026144787669182f,0.03292624279856682f,-0.03768223151564598f,-0.013247133232653141f,-0.0031783184967935085f,-0.10836407542228699f,-0.04794720187783241f,-0.050994861871004105f,0.01553389523178339f,-0.024216648191213608f,0.029494620859622955f,-0.046240780502557755f,0.004853179678320885f,0.0525989830493927f,0.01945173367857933f,0.01335456594824791f,-0.004628057591617107f,0.009802401065826416f,0.025825362652540207f,0.011329416185617447f,-0.04157964512705803f,-0.02302362583577633f,0.040078844875097275f,-0.006876836065202951f,-0.0001447134418413043f,-0.017956294119358063f,0.02872413396835327f,0.02204187773168087f,-0.04508942738175392f,0.004090702626854181f,0.05560774356126785f,-0.004528203513473272f,-0.031052028760313988f,0.00044481942313723266f,-0.003938944078981876f,-0.004499359056353569f,-0.0026135267689824104f,-0.14462514221668243f,-0.03146487474441528f,0.03901706635951996f,0.003929301630705595f,0.026617860421538353f,0.014381585642695427f,-0.013888676650822163f,-0.004394156858325005f,0.055685482919216156f,-0.0007017846219241619f,-0.0060139186680316925f,-0.058742281049489975f};
cl_mem separable_conv2d_10_internal_2_W;
float separable_conv2d_10_internal_3_A_[] = {2.1516273021698f,1.3730270862579346f,1.477465271949768f,2.5339319705963135f,3.0521774291992188f,0.5996341705322266f,0.24495093524456024f,-0.8581146001815796f,0.5290144681930542f,1.8263872861862183f,4.247034549713135f,3.0212199687957764f,3.0187313556671143f,-3.5082895755767822f,0.5074263215065002f,1.6266322135925293f};
cl_mem separable_conv2d_10_internal_3_A;
float conv2d_15_internal_1_W_[] = {-0.06809826195240021f,0.03249678760766983f,-0.03631367161870003f,0.015471363440155983f,0.004585709888488054f,-0.03181588649749756f,-0.011461821384727955f,0.02195717766880989f,-0.045227229595184326f,0.05704311653971672f,0.014981004409492016f,-0.08247722685337067f,0.06624861806631088f,-0.14276644587516785f,-0.03584272786974907f,0.03548011556267738f,-0.0549280047416687f,0.031895171850919724f,0.029303349554538727f,0.03670624643564224f,0.0517769418656826f,0.016826383769512177f,0.0020025211852043867f,0.10115370154380798f,-0.0055422415025532246f,0.006316827610135078f,0.06432931870222092f,0.007846101187169552f,-0.04873502627015114f,0.05581240355968475f,-0.020367799326777458f,-0.0008655524579808116f,-0.020781394094228745f,-0.13512732088565826f,-0.051848117262125015f,-0.01486511155962944f,-0.010551940649747849f,-0.051972318440675735f,-0.03802081570029259f,-0.11573400348424911f,-0.022966504096984863f,-0.040224120020866394f,-0.011914312839508057f,0.056786369532346725f,0.048880018293857574f,-0.07491973787546158f,0.066116563975811f,0.03197143226861954f,-0.004060682840645313f,0.12435531616210938f,-0.04906877875328064f,0.015307462774217129f,0.033717598766088486f,0.0018349102465435863f,0.07798923552036285f,0.01124696247279644f,-0.010176579467952251f,-0.08257333189249039f,0.005115163512527943f,-0.0017459569498896599f,-0.007010790053755045f,0.013895649462938309f,-0.06916883587837219f,-0.03469667583703995f,-0.004101384896785021f,0.01577991060912609f,0.021434545516967773f,-0.0687541663646698f,0.027541538700461388f,0.11434922367334366f,-0.0067688459530472755f,-0.03052634187042713f,-0.1357620656490326f,-0.003667989280074835f,0.022212013602256775f,0.05776567384600639f,0.045250777155160904f,0.1101059541106224f,0.04308758303523064f,0.0102898720651865f,0.025793369859457016f,0.026705211028456688f,-0.020327169448137283f,0.17790065705776215f,0.04974614083766937f,0.03722763806581497f,0.09353424608707428f,0.02534577064216137f,0.10332581400871277f,0.06998517364263535f,0.012315387837588787f,-0.003865041770040989f,0.04420357197523117f,-0.04441285505890846f,0.027091657742857933f,-0.05709993094205856f,0.11091155558824539f,-0.004837459418922663f,0.09146673232316971f,0.041391514241695404f,-0.02942153438925743f,-0.005982397124171257f,-0.039258114993572235f,-0.08927693217992783f,-0.026649808511137962f,-0.009452520869672298f,0.02490261197090149f,-0.10477351397275925f,-0.026106545701622963f,0.07005397230386734f,0.0006326228613033891f,-0.0764460414648056f,-0.04261036962270737f,0.00841742567718029f,0.017963021993637085f,-0.05819540470838547f,-0.0010445327498018742f,-0.16293714940547943f,-0.02441781386733055f,-0.04581509530544281f,0.002079996047541499f,-0.0242727380245924f,-0.0042914110235869884f,-0.05814944952726364f,-0.020647181198000908f,0.020953882485628128f,-0.010745804756879807f,-0.053099989891052246f,-0.010986379347741604f,-0.03393693268299103f,-0.05277732014656067f,0.026200629770755768f,0.007001862395554781f,-0.08479484170675278f,-0.01677565462887287f,-0.03366691619157791f,0.03214486688375473f,-0.22467640042304993f,0.03508381545543671f,-0.029188619926571846f,-0.038764264434576035f,-0.0382784940302372f,-0.0468204990029335f,-0.03856276348233223f,-0.00044284737668931484f,-0.02270541712641716f,-0.0429392009973526f,-0.007868004962801933f,-0.05338398367166519f,-0.013313894160091877f,-0.012853474356234074f,-0.28831180930137634f,-0.04399252310395241f,-0.005236814729869366f,0.08920262008905411f,-0.034928519278764725f,-0.01905849389731884f,-0.12263178080320358f,-0.032553885132074356f,-0.08698064088821411f,-0.03848746046423912f,-0.099043108522892f,0.035478375852108f,-0.029073016718029976f,0.014107681810855865f,0.012174331583082676f,0.10808735340833664f,-0.0568092055618763f,-0.04807374253869057f,0.020336652174592018f,0.015335864387452602f,-0.00011161653674207628f,-0.029777979478240013f,0.05455681309103966f,-0.008814837783575058f,0.05341053754091263f,-0.032155685126781464f,0.037579163908958435f,-0.0902629867196083f,-0.0403500571846962f,0.001495550386607647f,0.02362995408475399f,-0.015003522858023643f,0.06710628420114517f,-0.04466011002659798f,-0.02230793610215187f,0.01000684592872858f,-0.04442216455936432f,-0.034822672605514526f,-5.945168231846765e-05f,-0.030188195407390594f,-0.05296476185321808f,-0.06736994534730911f,-0.11314990371465683f,0.04006422311067581f,-0.06710843741893768f,0.10829532891511917f,0.05055038630962372f,0.04138479754328728f,-0.01848418265581131f,0.04975252225995064f,0.06692531704902649f,-0.022382685914635658f,0.09421470016241074f,0.02363838441669941f,-0.0029750261455774307f,-0.0028790568467229605f,-0.09972629696130753f,-0.01506520714610815f,0.07496185600757599f,0.061802130192518234f,-0.03827299550175667f,-0.06244992837309837f,-0.0021573700942099094f,0.177958682179451f,0.0024368891026824713f,-0.012119357474148273f,0.08999072015285492f,0.03559073060750961f,-0.0957656279206276f,-0.017959943041205406f,0.0051307654939591885f,0.012810289859771729f,-0.020846262574195862f,0.0534525141119957f,-0.039416711777448654f,-0.06653936952352524f,0.00636370899155736f,0.00933223869651556f,-0.023204373195767403f,-0.030753308907151222f,0.011179503984749317f,-0.05324139446020126f,-0.17113523185253143f,0.017698783427476883f,-0.05676081404089928f,0.00880440417677164f,-0.02055366337299347f,-0.0014730290276929736f,-0.0280448030680418f,-0.07383708655834198f,0.02222328633069992f,0.0010909868869930506f,-0.07667554914951324f,-0.04644282907247543f,0.03817324712872505f,-0.07406999170780182f,0.023492779582738876f,0.00867359060794115f,0.013444310054183006f,-0.007707791402935982f,0.02415398135781288f,0.014593913219869137f,-0.1633089929819107f,0.03754423186182976f,-0.01370516698807478f,-0.04914892464876175f,-0.06192997097969055f,-0.03539758548140526f,-0.022834334522485733f,-0.041117094457149506f,-0.051733147352933884f,-0.15765592455863953f,0.009958920069038868f,-0.03607787936925888f,0.009777489118278027f,-0.12992440164089203f,-0.07760562002658844f,-0.13461366295814514f,0.062007687985897064f,0.0013765429612249136f,-0.013925537467002869f,-0.10844817757606506f,-0.006914890371263027f,0.017537880688905716f,-0.09725172817707062f,-0.08419854193925858f,-0.11330452561378479f,-0.06697870790958405f,0.03397165983915329f,0.01596355438232422f,-0.09938707202672958f,0.019100001081824303f,0.07942015677690506f,0.015041785314679146f,0.007044611033052206f,0.027664991095662117f,-0.024956269189715385f,-0.05036601051688194f,-0.011088080704212189f,-0.030192915350198746f,-0.018594684079289436f,-0.16331325471401215f,-0.041636720299720764f,-0.09573329240083694f,-0.0526149682700634f,-0.05279657244682312f,0.0663912296295166f,0.04456105828285217f,-0.10449416935443878f,-0.02300274185836315f,0.012235200963914394f,-0.15569709241390228f,-0.07532579451799393f,-0.01839219219982624f,-0.007264511659741402f,-0.14000354707241058f,0.009274967014789581f,-0.05839691683650017f,-0.0005657027941197157f,0.026305271312594414f,-0.044707778841257095f,-0.1380465179681778f,-0.029052002355456352f,-0.014284678734838963f,-0.05228689685463905f,-0.03022727742791176f,-0.05788855627179146f,-0.030197108164429665f,-0.04205942153930664f};
cl_mem conv2d_15_internal_1_W;
float conv2d_15_internal_2_A_[] = {0.5319685935974121f,0.2914923429489136f,0.7613629102706909f,-0.024286899715662003f,0.17854805290699005f,0.24039779603481293f,0.010161454789340496f,0.6953312158584595f,0.7036888599395752f,-0.9149376749992371f,0.21982812881469727f,0.47611910104751587f,1.1041768789291382f,0.9984210133552551f,-1.4148309230804443f,0.39663437008857727f,0.2271014302968979f,0.2674333453178406f,-0.29155462980270386f,0.6856680512428284f};
cl_mem conv2d_15_internal_2_A;
float DetectionLayer_internal_1_W_[] = {0.43067046999931335f,1.7454248666763306f,0.11408006399869919f,0.3944438099861145f,0.3101394772529602f,0.1354619264602661f,0.4390251040458679f,0.5963742136955261f,-0.286214679479599f,0.22526317834854126f,0.10958095639944077f,0.2336995005607605f,-0.22506442666053772f,-1.9352282285690308f,-0.47552263736724854f,-0.32699820399284363f,-0.37003853917121887f,0.025376617908477783f,0.0052362894639372826f,-0.13179688155651093f,0.43234553933143616f,-0.42250344157218933f,1.1655058860778809f,-0.09174266457557678f,3.199720859527588f,0.04112567380070686f,-0.02587086707353592f,0.02007947489619255f,1.4143790006637573f,-0.11744767427444458f,-4.46068811416626f,0.34185540676116943f,-0.010498922318220139f,0.017995113506913185f,1.5654436349868774f,-0.2990829348564148f,0.21295182406902313f,1.3451987504959106f,0.1718408614397049f,-0.5254846215248108f,-5.482446193695068f,-0.24954691529273987f,-0.00037248898297548294f,1.9611854553222656f,-0.5352174043655396f,-0.20508961379528046f,1.0650721788406372f,0.1759682297706604f,-0.2608605623245239f,-0.6136223077774048f,-0.3225434124469757f,0.004362402018159628f,-6.280622482299805f,-0.2463255673646927f,0.06530061364173889f,2.7527403831481934f,-0.08812186121940613f,-0.09759320318698883f,-5.817043304443359f,-0.4214480519294739f,-0.604087233543396f,-4.105340480804443f,0.10218644142150879f,-0.12319421023130417f,-5.950368881225586f,-0.08355861902236938f,-0.9413210153579712f,0.7312884330749512f,0.2286950796842575f,0.35081708431243896f,-3.9012115001678467f,0.34043192863464355f,-0.08400867134332657f,-2.021909713745117f,-0.22351519763469696f,-0.40109390020370483f,0.5554583072662354f,0.2839660048484802f,0.4020405113697052f,-1.0447801351547241f,0.657467782497406f,0.4244548976421356f,-0.6509157419204712f,-0.05474978685379028f,-0.6063436269760132f,-2.0747225284576416f,-1.3921195268630981f,-0.32717615365982056f,1.7176710367202759f,0.281933069229126f,0.18112196028232574f,0.8962066173553467f,0.0036542960442602634f,-0.0411355122923851f,-6.9969401359558105f,-0.09842047095298767f,0.043589185923337936f,-0.806254506111145f,-0.5655776858329773f,0.04063502699136734f,1.1234818696975708f,-0.03888142108917236f,0.004600588232278824f,1.9203150272369385f,-0.48136472702026367f,-0.43195271492004395f,-0.05399544909596443f,-0.1497986614704132f,-0.16737057268619537f,-2.1616644859313965f,0.27517983317375183f,0.13343773782253265f,2.753486394882202f,-0.46883100271224976f,0.1845083236694336f,-0.06978647410869598f,0.38369596004486084f,-0.08641501516103745f,-6.059449672698975f,-0.01246720552444458f};
cl_mem DetectionLayer_internal_1_W;
float DetectionLayer_internal_2_A_[] = {-0.010018094442784786f,-0.530255913734436f,0.7484062314033508f,0.5781781673431396f,-1.942268967628479f,0.0f};
cl_mem DetectionLayer_internal_2_A;
void initclmemobjects()
{
separable_conv2d_6_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  108 * sizeof(float), separable_conv2d_6_internal_1_W_, &errNum);
separable_conv2d_6_internal_2_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  36 * sizeof(float), separable_conv2d_6_internal_2_W_, &errNum);
separable_conv2d_6_internal_3_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  3 * sizeof(float), separable_conv2d_6_internal_3_A_, &errNum);
conv2d_11_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  24 * sizeof(float), conv2d_11_internal_1_W_, &errNum);
conv2d_11_internal_2_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  8 * sizeof(float), conv2d_11_internal_2_A_, &errNum);
separable_conv2d_7_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  288 * sizeof(float), separable_conv2d_7_internal_1_W_, &errNum);
separable_conv2d_7_internal_2_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  256 * sizeof(float), separable_conv2d_7_internal_2_W_, &errNum);
separable_conv2d_7_internal_3_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  8 * sizeof(float), separable_conv2d_7_internal_3_A_, &errNum);
conv2d_12_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  96 * sizeof(float), conv2d_12_internal_1_W_, &errNum);
conv2d_12_internal_2_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  12 * sizeof(float), conv2d_12_internal_2_A_, &errNum);
separable_conv2d_8_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  432 * sizeof(float), separable_conv2d_8_internal_1_W_, &errNum);
separable_conv2d_8_internal_2_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  576 * sizeof(float), separable_conv2d_8_internal_2_W_, &errNum);
separable_conv2d_8_internal_3_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  12 * sizeof(float), separable_conv2d_8_internal_3_A_, &errNum);
conv2d_13_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  96 * sizeof(float), conv2d_13_internal_1_W_, &errNum);
conv2d_13_internal_2_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  8 * sizeof(float), conv2d_13_internal_2_A_, &errNum);
separable_conv2d_9_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  288 * sizeof(float), separable_conv2d_9_internal_1_W_, &errNum);
separable_conv2d_9_internal_2_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  256 * sizeof(float), separable_conv2d_9_internal_2_W_, &errNum);
separable_conv2d_9_internal_3_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  8 * sizeof(float), separable_conv2d_9_internal_3_A_, &errNum);
conv2d_14_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  128 * sizeof(float), conv2d_14_internal_1_W_, &errNum);
conv2d_14_internal_2_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  16 * sizeof(float), conv2d_14_internal_2_A_, &errNum);
separable_conv2d_10_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  576 * sizeof(float), separable_conv2d_10_internal_1_W_, &errNum);
separable_conv2d_10_internal_2_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  1024 * sizeof(float), separable_conv2d_10_internal_2_W_, &errNum);
separable_conv2d_10_internal_3_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  16 * sizeof(float), separable_conv2d_10_internal_3_A_, &errNum);
conv2d_15_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  320 * sizeof(float), conv2d_15_internal_1_W_, &errNum);
conv2d_15_internal_2_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  20 * sizeof(float), conv2d_15_internal_2_A_, &errNum);
DetectionLayer_internal_1_W = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  120 * sizeof(float), DetectionLayer_internal_1_W_, &errNum);
DetectionLayer_internal_2_A = clCreateBuffer(context,
  CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  6 * sizeof(float), DetectionLayer_internal_2_A_, &errNum);
}

//cl_buffers
  cl_mem x0;
      float * x0_result;
  cl_mem x1;
  cl_mem x22;
  cl_mem x23;
  cl_mem x2;
  cl_mem x24;
  cl_mem x25;
  cl_mem x3;
  cl_mem x4;
  cl_mem x5;
  cl_mem x26;
  cl_mem x27;
  cl_mem x6;
  cl_mem x28;
  cl_mem x29;
  cl_mem x7;
  cl_mem x8;
  cl_mem x9;
  cl_mem x30;
  cl_mem x31;
  cl_mem x10;
  cl_mem x32;
  cl_mem x33;
  cl_mem x11;
  cl_mem x12;
  cl_mem x13;
  cl_mem x34;
  cl_mem x35;
  cl_mem x14;
  cl_mem x36;
  cl_mem x37;
  cl_mem x15;
  cl_mem x16;
  cl_mem x17;
  cl_mem x38;
  cl_mem x39;
  cl_mem x18;
  cl_mem x40;
  cl_mem x41;
  cl_mem x19;
  cl_mem x20;


//initOcl()

const int COUNT = 1315;
int initOcl()
{
const char * kernelSourceString[COUNT] = {

"#define LINEAR_3(i1, i2, i3, d2, d3) ((i1) * (d2) * (d3) + (i2) * (d3) + (i3))\n",
"#define LINEAR_4(i1, i2, i3, i4, d2, d3, d4) ((i1) * (d2) * (d3) * (d4) + (i2) * (d3) * (d4) + (i3) * (d4) + (i4))\n",
"#define MAX(a, b) ((a) > (b) ? (a) : (b))\n",
"  __kernel void separable_conv2d_6_internal_0(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  {\n",
"      // separable_conv2d_6_internal_0\n",
"      const int H = 120;\n",
"      const int W = 160;\n",
"      const int H_OUT = 121;\n",
"      const int W_OUT = 161;\n",
"      const int C = 3;\n",
"      const int PT = 0;\n",
"      const int PL = 0;\n",
"      const float value = 0.0f;\n",
"      int h_out = get_global_id(0); //H_OUT\n",
"      int w_out = get_global_id(1); //W_OUT\n",
"      \n",
"      int h = h_out - PT;\n",
"      int w = w_out - PL;\n",
"      \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = ((0 <= h) && (h < H) && (0 <= w) && (w < W)) ? in[LINEAR_3(h, w, c, W, C)] : value;\n",
"          out[LINEAR_3(h_out, w_out, c, W_OUT, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_6_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 161;\n",
"      const int C_IN = 3;\n",
"      const int C_OUT = 12;\n",
"      const int W_OUT = 80;\n",
"      const int SH = 2;\n",
"      const int SW = 2;\n",
"      const int KH = 3;\n",
"      const int KW = 3;\n",
"      const int DEPTH_MULTIPLIER = 4;\n",
"  \n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int c = 0; c < C_IN; c++)\n",
"              {\n",
"                  for (int m = 0; m < DEPTH_MULTIPLIER; m++)\n",
"                  {\n",
"                      int c_out = c * DEPTH_MULTIPLIER + m;\n",
"                      out[LINEAR_3(x_out_1, x_out_2, c_out, W_OUT, C_OUT)] += weights[LINEAR_4(iw, jw, c, m, KW, C_IN, DEPTH_MULTIPLIER)] * in[LINEAR_3(x_1, x_2, c, W, C_IN)];\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_6_internal_2(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 80;\n",
"      const int C_IN = 12;\n",
"      const int C_OUT = 3;\n",
"      const int W_OUT = 80;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_6_internal_3(\n",
"    __global const float *in,\n",
"    __global const float *separable_conv2d_6_internal_3_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 80;\n",
"      const int C = 3;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + separable_conv2d_6_internal_3_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_16(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 80;\n",
"      const int C = 3;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_11_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 80;\n",
"      const int C_IN = 3;\n",
"      const int C_OUT = 8;\n",
"      const int W_OUT = 80;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_11_internal_2(\n",
"    __global const float *in,\n",
"    __global const float *conv2d_11_internal_2_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 80;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c+=4) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)/4];\n",
"          {\n",
"                  element = element + conv2d_11_internal_2_A[c/4];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)/4] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_17(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 80;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_7_internal_0(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  {\n",
"      // separable_conv2d_7_internal_0\n",
"      const int H = 60;\n",
"      const int W = 80;\n",
"      const int H_OUT = 61;\n",
"      const int W_OUT = 81;\n",
"      const int C = 8;\n",
"      const int PT = 0;\n",
"      const int PL = 0;\n",
"      const float value = 0.0f;\n",
"      int h_out = get_global_id(0); //H_OUT\n",
"      int w_out = get_global_id(1); //W_OUT\n",
"      \n",
"      int h = h_out - PT;\n",
"      int w = w_out - PL;\n",
"      \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = ((0 <= h) && (h < H) && (0 <= w) && (w < W)) ? in[LINEAR_3(h, w, c, W, C)] : value;\n",
"          out[LINEAR_3(h_out, w_out, c, W_OUT, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_7_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 81;\n",
"      const int C_IN = 8;\n",
"      const int C_OUT = 32;\n",
"      const int W_OUT = 40;\n",
"      const int SH = 2;\n",
"      const int SW = 2;\n",
"      const int KH = 3;\n",
"      const int KW = 3;\n",
"      const int DEPTH_MULTIPLIER = 4;\n",
"  \n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int c = 0; c < C_IN; c++)\n",
"              {\n",
"                  for (int m = 0; m < DEPTH_MULTIPLIER; m++)\n",
"                  {\n",
"                      int c_out = c * DEPTH_MULTIPLIER + m;\n",
"                      out[LINEAR_3(x_out_1, x_out_2, c_out, W_OUT, C_OUT)] += weights[LINEAR_4(iw, jw, c, m, KW, C_IN, DEPTH_MULTIPLIER)] * in[LINEAR_3(x_1, x_2, c, W, C_IN)];\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_7_internal_2(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 40;\n",
"      const int C_IN = 32;\n",
"      const int C_OUT = 8;\n",
"      const int W_OUT = 40;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_7_internal_3(\n",
"    __global const float *in,\n",
"    __global const float *separable_conv2d_7_internal_3_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 40;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + separable_conv2d_7_internal_3_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_18(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 40;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_12_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 40;\n",
"      const int C_IN = 8;\n",
"      const int C_OUT = 12;\n",
"      const int W_OUT = 40;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_12_internal_2(\n",
"    __global const float *in,\n",
"    __global const float *conv2d_12_internal_2_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 40;\n",
"      const int C = 12;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + conv2d_12_internal_2_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_19(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 40;\n",
"      const int C = 12;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_8_internal_0(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  {\n",
"      // separable_conv2d_8_internal_0\n",
"      const int H = 30;\n",
"      const int W = 40;\n",
"      const int H_OUT = 31;\n",
"      const int W_OUT = 41;\n",
"      const int C = 12;\n",
"      const int PT = 0;\n",
"      const int PL = 0;\n",
"      const float value = 0.0f;\n",
"      int h_out = get_global_id(0); //H_OUT\n",
"      int w_out = get_global_id(1); //W_OUT\n",
"      \n",
"      int h = h_out - PT;\n",
"      int w = w_out - PL;\n",
"      \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = ((0 <= h) && (h < H) && (0 <= w) && (w < W)) ? in[LINEAR_3(h, w, c, W, C)] : value;\n",
"          out[LINEAR_3(h_out, w_out, c, W_OUT, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_8_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 41;\n",
"      const int C_IN = 12;\n",
"      const int C_OUT = 48;\n",
"      const int W_OUT = 20;\n",
"      const int SH = 2;\n",
"      const int SW = 2;\n",
"      const int KH = 3;\n",
"      const int KW = 3;\n",
"      const int DEPTH_MULTIPLIER = 4;\n",
"  \n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int c = 0; c < C_IN; c++)\n",
"              {\n",
"                  for (int m = 0; m < DEPTH_MULTIPLIER; m++)\n",
"                  {\n",
"                      int c_out = c * DEPTH_MULTIPLIER + m;\n",
"                      out[LINEAR_3(x_out_1, x_out_2, c_out, W_OUT, C_OUT)] += weights[LINEAR_4(iw, jw, c, m, KW, C_IN, DEPTH_MULTIPLIER)] * in[LINEAR_3(x_1, x_2, c, W, C_IN)];\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_8_internal_2(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 20;\n",
"      const int C_IN = 48;\n",
"      const int C_OUT = 12;\n",
"      const int W_OUT = 20;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_8_internal_3(\n",
"    __global const float *in,\n",
"    __global const float *separable_conv2d_8_internal_3_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 12;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + separable_conv2d_8_internal_3_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_20(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 12;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_13_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 20;\n",
"      const int C_IN = 12;\n",
"      const int C_OUT = 8;\n",
"      const int W_OUT = 20;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_13_internal_2(\n",
"    __global const float *in,\n",
"    __global const float *conv2d_13_internal_2_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + conv2d_13_internal_2_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_21(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_9_internal_0(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  {\n",
"      // separable_conv2d_9_internal_0\n",
"      const int H = 15;\n",
"      const int W = 20;\n",
"      const int H_OUT = 17;\n",
"      const int W_OUT = 22;\n",
"      const int C = 8;\n",
"      const int PT = 1;\n",
"      const int PL = 1;\n",
"      const float value = 0.0f;\n",
"      int h_out = get_global_id(0); //H_OUT\n",
"      int w_out = get_global_id(1); //W_OUT\n",
"      \n",
"      int h = h_out - PT;\n",
"      int w = w_out - PL;\n",
"      \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = ((0 <= h) && (h < H) && (0 <= w) && (w < W)) ? in[LINEAR_3(h, w, c, W, C)] : value;\n",
"          out[LINEAR_3(h_out, w_out, c, W_OUT, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_9_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 22;\n",
"      const int C_IN = 8;\n",
"      const int C_OUT = 32;\n",
"      const int W_OUT = 20;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 3;\n",
"      const int KW = 3;\n",
"      const int DEPTH_MULTIPLIER = 4;\n",
"  \n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int c = 0; c < C_IN; c++)\n",
"              {\n",
"                  for (int m = 0; m < DEPTH_MULTIPLIER; m++)\n",
"                  {\n",
"                      int c_out = c * DEPTH_MULTIPLIER + m;\n",
"                      out[LINEAR_3(x_out_1, x_out_2, c_out, W_OUT, C_OUT)] += weights[LINEAR_4(iw, jw, c, m, KW, C_IN, DEPTH_MULTIPLIER)] * in[LINEAR_3(x_1, x_2, c, W, C_IN)];\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_9_internal_2(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 20;\n",
"      const int C_IN = 32;\n",
"      const int C_OUT = 8;\n",
"      const int W_OUT = 20;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_9_internal_3(\n",
"    __global const float *in,\n",
"    __global const float *separable_conv2d_9_internal_3_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + separable_conv2d_9_internal_3_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_22(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 8;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_14_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 20;\n",
"      const int C_IN = 8;\n",
"      const int C_OUT = 16;\n",
"      const int W_OUT = 20;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_14_internal_2(\n",
"    __global const float *in,\n",
"    __global const float *conv2d_14_internal_2_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 16;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + conv2d_14_internal_2_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_23(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 20;\n",
"      const int C = 16;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_10_internal_0(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  {\n",
"      // separable_conv2d_10_internal_0\n",
"      const int H = 15;\n",
"      const int W = 20;\n",
"      const int H_OUT = 17;\n",
"      const int W_OUT = 21;\n",
"      const int C = 16;\n",
"      const int PT = 1;\n",
"      const int PL = 0;\n",
"      const float value = 0.0f;\n",
"      int h_out = get_global_id(0); //H_OUT\n",
"      int w_out = get_global_id(1); //W_OUT\n",
"      \n",
"      int h = h_out - PT;\n",
"      int w = w_out - PL;\n",
"      \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = ((0 <= h) && (h < H) && (0 <= w) && (w < W)) ? in[LINEAR_3(h, w, c, W, C)] : value;\n",
"          out[LINEAR_3(h_out, w_out, c, W_OUT, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_10_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 21;\n",
"      const int C_IN = 16;\n",
"      const int C_OUT = 64;\n",
"      const int W_OUT = 10;\n",
"      const int SH = 2;\n",
"      const int SW = 2;\n",
"      const int KH = 3;\n",
"      const int KW = 3;\n",
"      const int DEPTH_MULTIPLIER = 4;\n",
"  \n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int c = 0; c < C_IN; c++)\n",
"              {\n",
"                  for (int m = 0; m < DEPTH_MULTIPLIER; m++)\n",
"                  {\n",
"                      int c_out = c * DEPTH_MULTIPLIER + m;\n",
"                      out[LINEAR_3(x_out_1, x_out_2, c_out, W_OUT, C_OUT)] += weights[LINEAR_4(iw, jw, c, m, KW, C_IN, DEPTH_MULTIPLIER)] * in[LINEAR_3(x_1, x_2, c, W, C_IN)];\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_10_internal_2(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 10;\n",
"      const int C_IN = 64;\n",
"      const int C_OUT = 16;\n",
"      const int W_OUT = 10;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void separable_conv2d_10_internal_3(\n",
"    __global const float *in,\n",
"    __global const float *separable_conv2d_10_internal_3_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 10;\n",
"      const int C = 16;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + separable_conv2d_10_internal_3_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_24(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 10;\n",
"      const int C = 16;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_15_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 10;\n",
"      const int C_IN = 16;\n",
"      const int C_OUT = 20;\n",
"      const int W_OUT = 10;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void conv2d_15_internal_2(\n",
"    __global const float *in,\n",
"    __global const float *conv2d_15_internal_2_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 10;\n",
"      const int C = 20;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + conv2d_15_internal_2_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void leaky_re_lu_25(\n",
"    __global const float *in,\n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 10;\n",
"      const int C = 20;\n",
"  \n",
"      for (int c = 0; c < C; c++)\n",
"      {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"  \n",
"          // inner\n",
"          {\n",
"                  element = MAX(element, 0.10000000149011612f * element);\n",
"          }\n",
"  \n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n",
"  __kernel void DetectionLayer_internal_1(\n",
"    __global const float *in,\n",
"    __global float *out,\n",
"    __global float *weights)\n",
"  {\n",
"      const int W = 10;\n",
"      const int C_IN = 20;\n",
"      const int C_OUT = 6;\n",
"      const int W_OUT = 10;\n",
"      const int SH = 1;\n",
"      const int SW = 1;\n",
"      const int KH = 1;\n",
"      const int KW = 1;\n",
"  \n",
"      int x_out_1 = get_global_id(0);\n",
"      int x_out_2 = get_global_id(1);\n",
"  \n",
"      int ix = x_out_1 * SH;\n",
"      int jx = x_out_2 * SW;\n",
"      for (int iw = 0; iw < KH; iw++)\n",
"      {\n",
"          int x_1 = ix + iw;\n",
"          for (int jw = 0; jw < KW; jw++)\n",
"          {\n",
"              int x_2 = jx + jw;\n",
"              for (int kw = 0; kw < C_IN; kw++)\n",
"              {\n",
"                  float4 x_in = (float4) in[LINEAR_3(x_1, x_2, kw, W, C_IN)];\n",
"                  int lw;\n",
"                  for (lw = 0; lw < C_OUT - 3; lw += 4)\n",
"                  {\n",
"                      float4 w, y, x_out;\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      w = (float4) (weights[w_index], weights[w_index+1], weights[w_index+2], weights[w_index+3]);\n",
"                      y = x_in * w;\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      x_out.xyzw = (float4) (out[out_index], out[out_index+1], out[out_index+2], out[out_index+3]);\n",
"                      x_out = x_out + y;\n",
"                      out[out_index+0] = x_out.x;\n",
"                      out[out_index+1] = x_out.y;\n",
"                      out[out_index+2] = x_out.z;\n",
"                      out[out_index+3] = x_out.w;\n",
"                  }\n",
"                  for (; lw < C_OUT; lw++)\n",
"                  {\n",
"                      int w_index = LINEAR_4(iw, jw, kw, lw, KW, C_IN, C_OUT);\n",
"                      float w = weights[w_index];\n",
"                      int out_index = LINEAR_3(x_out_1, x_out_2, lw, W_OUT, C_OUT);\n",
"                      out[out_index] += x_in.x * w;\n",
"                  }\n",
"              }\n",
"          }\n",
"      }\n",
"  }\n",
"  __kernel void DetectionLayer_internal_2(\n",
"    __global const float *in,\n",
"    __global const float *DetectionLayer_internal_2_A,  \n",
"    __global float *out)\n",
"  { \n",
"      const int h = get_global_id(0);\n",
"      const int w = get_global_id(1);\n",
"      const int W = 10;\n",
"      const int C = 6;\n",
"  \n",
"      for (int c = 0; c < C; c++) {\n",
"          float element = in[LINEAR_3(h, w, c, W, C)];\n",
"          {\n",
"                  element = element + DetectionLayer_internal_2_A[c];\n",
"          }\n",
"          out[LINEAR_3(h, w, c, W, C)] = element;\n",
"      }\n",
"  }\n"
};
  cl_uint dev_cnt = 0;
  clGetPlatformIDs(0, 0, &dev_cnt);

  cl_platform_id platform_ids[100];
  clGetPlatformIDs(dev_cnt, platform_ids, NULL);

  cl_device_id device_id;
  errNum = clGetDeviceIDs(platform_ids[0], CL_DEVICE_TYPE_GPU, 1, &device_id, NULL);
  if (errNum != CL_SUCCESS)
  {
    printf("Error: Failed to create a device group!\n");
    return -1;
  }

  context = clCreateContext(0, 1, &device_id, NULL, NULL, &errNum);
  if (!context)
  {
    printf("Error: Failed to create a compute context!\n");
    return -1;
  }

  commandQueue = clCreateCommandQueue(context, device_id, 0, &errNum);
  if (!commandQueue)
  {
    printf("Error: Failed to create a command commands!\n");
    return -1;
  }

  program = clCreateProgramWithSource(context, COUNT, (const char **) kernelSourceString, NULL, &errNum);

  if (!program)
  {
    printf("Error: Failed to create compute program!\n");
    return EXIT_FAILURE;
  }

  errNum = clBuildProgram(program, 0, NULL, NULL, NULL, NULL);
  if (errNum != CL_SUCCESS)
  {
    size_t len;
    char buffer[2048];
    printf("Error: Failed to build program executable!\n");
    clGetProgramBuildInfo(program, device_id, CL_PROGRAM_BUILD_LOG, sizeof(buffer), buffer, &len);
    printf("%s\n", buffer);
    exit(1);
  }
  x0_result = (float*) calloc(58443, sizeof(float));
  x0 = clCreateBuffer(context,
    CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
    58443 * sizeof(float), x0_result, &errNum);
  x1 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    57600 * sizeof(float), NULL, &errNum);
  x22 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x23 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x2 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x24 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    38400 * sizeof(float), NULL, &errNum);
  x25 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    38400 * sizeof(float), NULL, &errNum);
  x3 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    38400 * sizeof(float), NULL, &errNum);
  x4 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    39528 * sizeof(float), NULL, &errNum);
  x5 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    38400 * sizeof(float), NULL, &errNum);
  x26 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    9600 * sizeof(float), NULL, &errNum);
  x27 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    9600 * sizeof(float), NULL, &errNum);
  x6 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    9600 * sizeof(float), NULL, &errNum);
  x28 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x29 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x7 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x8 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    15252 * sizeof(float), NULL, &errNum);
  x9 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    14400 * sizeof(float), NULL, &errNum);
  x30 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    3600 * sizeof(float), NULL, &errNum);
  x31 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    3600 * sizeof(float), NULL, &errNum);
  x10 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    3600 * sizeof(float), NULL, &errNum);
  x32 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2400 * sizeof(float), NULL, &errNum);
  x33 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2400 * sizeof(float), NULL, &errNum);
  x11 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2400 * sizeof(float), NULL, &errNum);
  x12 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2992 * sizeof(float), NULL, &errNum);
  x13 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    9600 * sizeof(float), NULL, &errNum);
  x34 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2400 * sizeof(float), NULL, &errNum);
  x35 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2400 * sizeof(float), NULL, &errNum);
  x14 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    2400 * sizeof(float), NULL, &errNum);
  x36 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    4800 * sizeof(float), NULL, &errNum);
  x37 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    4800 * sizeof(float), NULL, &errNum);
  x15 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    4800 * sizeof(float), NULL, &errNum);
  x16 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    5712 * sizeof(float), NULL, &errNum);
  x17 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    5120 * sizeof(float), NULL, &errNum);
  x38 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    1280 * sizeof(float), NULL, &errNum);
  x39 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    1280 * sizeof(float), NULL, &errNum);
  x18 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    1280 * sizeof(float), NULL, &errNum);
  x40 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    1600 * sizeof(float), NULL, &errNum);
  x41 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    1600 * sizeof(float), NULL, &errNum);
  x19 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    1600 * sizeof(float), NULL, &errNum);
  x20 = clCreateBuffer(context,
    CL_MEM_READ_WRITE,
    480 * sizeof(float), NULL, &errNum);

  return errNum;
}


int createKernel(cl_program  *program, cl_kernel *kernel, char kernelName[])
{
  *kernel = clCreateKernel(*program, kernelName, &errNum);
  if (!*kernel || errNum != CL_SUCCESS)
  {
    printf("Error: Failed to create compute kernel!\n");
    return -1;
  }
  return 0;
}

void cnn(cl_mem in_0, cl_mem out_0)
{
  INTERNAL_CNN_STOPWATCH("OpPadding (separable_conv2d_6_internal_0)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {121, 161};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_6_internal_0");

        if ( in_0 == NULL || x0 == NULL) {
            printf("Given memObjects are null in separable_conv2d_6_internal_0.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &in_0);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x0);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_6_internal_0.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_6_internal_0\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpDepthwiseConvolution2D (separable_conv2d_6_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_6_internal_1");

        if ( x0 == NULL || x1 == NULL || separable_conv2d_6_internal_1_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_6_internal_1.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x0);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x1);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_6_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_6_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_6_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (separable_conv2d_6_internal_2)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_6_internal_2");

        if ( x1 == NULL || x22 == NULL || separable_conv2d_6_internal_2_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_6_internal_2.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x1);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x22);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_6_internal_2_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_6_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_6_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (separable_conv2d_6_internal_3)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_6_internal_3");

        if (x22 == NULL || separable_conv2d_6_internal_3_A == NULL || x23 == NULL) {
            printf("Given memObjects are null in separable_conv2d_6_internal_3.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x22);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &separable_conv2d_6_internal_3_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x23);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_6_internal_3.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_6_internal_3\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_16)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_16");

        if ( x23 == NULL || x2 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_16.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x23);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x2);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_16.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_16\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (conv2d_11_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_11_internal_1");

        if ( x2 == NULL || x24 == NULL || conv2d_11_internal_1_W == NULL) {
            printf("Given memObjects are null in conv2d_11_internal_1.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x2);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x24);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &conv2d_11_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_11_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_11_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (conv2d_11_internal_2)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_11_internal_2");

        if (x24 == NULL || conv2d_11_internal_2_A == NULL || x25 == NULL) {
            printf("Given memObjects are null in conv2d_11_internal_2.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x24);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &conv2d_11_internal_2_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x25);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_11_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_11_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_17)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {60, 80};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_17");

        if ( x25 == NULL || x3 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_17.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x25);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x3);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_17.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_17\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpPadding (separable_conv2d_7_internal_0)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {61, 81};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_7_internal_0");

        if ( x3 == NULL || x4 == NULL) {
            printf("Given memObjects are null in separable_conv2d_7_internal_0.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x3);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x4);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_7_internal_0.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_7_internal_0\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpDepthwiseConvolution2D (separable_conv2d_7_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_7_internal_1");

        if ( x4 == NULL || x5 == NULL || separable_conv2d_7_internal_1_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_7_internal_1.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x4);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x5);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_7_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_7_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_7_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (separable_conv2d_7_internal_2)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_7_internal_2");

        if ( x5 == NULL || x26 == NULL || separable_conv2d_7_internal_2_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_7_internal_2.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x5);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x26);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_7_internal_2_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_7_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_7_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (separable_conv2d_7_internal_3)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_7_internal_3");

        if (x26 == NULL || separable_conv2d_7_internal_3_A == NULL || x27 == NULL) {
            printf("Given memObjects are null in separable_conv2d_7_internal_3.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x26);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &separable_conv2d_7_internal_3_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x27);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_7_internal_3.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_7_internal_3\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_18)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_18");

        if ( x27 == NULL || x6 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_18.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x27);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x6);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_18.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_18\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (conv2d_12_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_12_internal_1");

        if ( x6 == NULL || x28 == NULL || conv2d_12_internal_1_W == NULL) {
            printf("Given memObjects are null in conv2d_12_internal_1.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x6);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x28);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &conv2d_12_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_12_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_12_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (conv2d_12_internal_2)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_12_internal_2");

        if (x28 == NULL || conv2d_12_internal_2_A == NULL || x29 == NULL) {
            printf("Given memObjects are null in conv2d_12_internal_2.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x28);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &conv2d_12_internal_2_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x29);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_12_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_12_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_19)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {30, 40};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_19");

        if ( x29 == NULL || x7 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_19.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x29);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x7);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_19.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_19\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpPadding (separable_conv2d_8_internal_0)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {31, 41};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_8_internal_0");

        if ( x7 == NULL || x8 == NULL) {
            printf("Given memObjects are null in separable_conv2d_8_internal_0.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x7);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x8);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_8_internal_0.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_8_internal_0\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpDepthwiseConvolution2D (separable_conv2d_8_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_8_internal_1");

        if ( x8 == NULL || x9 == NULL || separable_conv2d_8_internal_1_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_8_internal_1.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x8);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x9);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_8_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_8_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_8_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (separable_conv2d_8_internal_2)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_8_internal_2");

        if ( x9 == NULL || x30 == NULL || separable_conv2d_8_internal_2_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_8_internal_2.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x9);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x30);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_8_internal_2_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_8_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_8_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (separable_conv2d_8_internal_3)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_8_internal_3");

        if (x30 == NULL || separable_conv2d_8_internal_3_A == NULL || x31 == NULL) {
            printf("Given memObjects are null in separable_conv2d_8_internal_3.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x30);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &separable_conv2d_8_internal_3_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x31);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_8_internal_3.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_8_internal_3\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_20)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_20");

        if ( x31 == NULL || x10 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_20.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x31);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x10);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_20.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_20\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (conv2d_13_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_13_internal_1");

        if ( x10 == NULL || x32 == NULL || conv2d_13_internal_1_W == NULL) {
            printf("Given memObjects are null in conv2d_13_internal_1.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x10);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x32);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &conv2d_13_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_13_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_13_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (conv2d_13_internal_2)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_13_internal_2");

        if (x32 == NULL || conv2d_13_internal_2_A == NULL || x33 == NULL) {
            printf("Given memObjects are null in conv2d_13_internal_2.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x32);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &conv2d_13_internal_2_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x33);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_13_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_13_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_21)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_21");

        if ( x33 == NULL || x11 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_21.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x33);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x11);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_21.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_21\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpPadding (separable_conv2d_9_internal_0)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {17, 22};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_9_internal_0");

        if ( x11 == NULL || x12 == NULL) {
            printf("Given memObjects are null in separable_conv2d_9_internal_0.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x11);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x12);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_9_internal_0.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_9_internal_0\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpDepthwiseConvolution2D (separable_conv2d_9_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_9_internal_1");

        if ( x12 == NULL || x13 == NULL || separable_conv2d_9_internal_1_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_9_internal_1.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x12);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x13);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_9_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_9_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_9_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (separable_conv2d_9_internal_2)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_9_internal_2");

        if ( x13 == NULL || x34 == NULL || separable_conv2d_9_internal_2_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_9_internal_2.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x13);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x34);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_9_internal_2_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_9_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_9_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (separable_conv2d_9_internal_3)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_9_internal_3");

        if (x34 == NULL || separable_conv2d_9_internal_3_A == NULL || x35 == NULL) {
            printf("Given memObjects are null in separable_conv2d_9_internal_3.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x34);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &separable_conv2d_9_internal_3_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x35);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_9_internal_3.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_9_internal_3\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_22)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_22");

        if ( x35 == NULL || x14 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_22.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x35);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x14);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_22.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_22\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (conv2d_14_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_14_internal_1");

        if ( x14 == NULL || x36 == NULL || conv2d_14_internal_1_W == NULL) {
            printf("Given memObjects are null in conv2d_14_internal_1.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x14);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x36);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &conv2d_14_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_14_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_14_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (conv2d_14_internal_2)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_14_internal_2");

        if (x36 == NULL || conv2d_14_internal_2_A == NULL || x37 == NULL) {
            printf("Given memObjects are null in conv2d_14_internal_2.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x36);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &conv2d_14_internal_2_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x37);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_14_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_14_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_23)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {15, 20};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_23");

        if ( x37 == NULL || x15 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_23.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x37);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x15);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_23.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_23\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpPadding (separable_conv2d_10_internal_0)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {17, 21};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_10_internal_0");

        if ( x15 == NULL || x16 == NULL) {
            printf("Given memObjects are null in separable_conv2d_10_internal_0.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x15);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x16);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_10_internal_0.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_10_internal_0\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpDepthwiseConvolution2D (separable_conv2d_10_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_10_internal_1");

        if ( x16 == NULL || x17 == NULL || separable_conv2d_10_internal_1_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_10_internal_1.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x16);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x17);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_10_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_10_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_10_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (separable_conv2d_10_internal_2)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_10_internal_2");

        if ( x17 == NULL || x38 == NULL || separable_conv2d_10_internal_2_W == NULL) {
            printf("Given memObjects are null in separable_conv2d_10_internal_2.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x17);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x38);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &separable_conv2d_10_internal_2_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_10_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_10_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (separable_conv2d_10_internal_3)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "separable_conv2d_10_internal_3");

        if (x38 == NULL || separable_conv2d_10_internal_3_A == NULL || x39 == NULL) {
            printf("Given memObjects are null in separable_conv2d_10_internal_3.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x38);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &separable_conv2d_10_internal_3_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x39);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in separable_conv2d_10_internal_3.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelseparable_conv2d_10_internal_3\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_24)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_24");

        if ( x39 == NULL || x18 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_24.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x39);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x18);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_24.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_24\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (conv2d_15_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_15_internal_1");

        if ( x18 == NULL || x40 == NULL || conv2d_15_internal_1_W == NULL) {
            printf("Given memObjects are null in conv2d_15_internal_1.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x18);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x40);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &conv2d_15_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_15_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_15_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (conv2d_15_internal_2)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "conv2d_15_internal_2");

        if (x40 == NULL || conv2d_15_internal_2_A == NULL || x41 == NULL) {
            printf("Given memObjects are null in conv2d_15_internal_2.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x40);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &conv2d_15_internal_2_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &x41);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in conv2d_15_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelconv2d_15_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpLeakyReLU (leaky_re_lu_25)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "leaky_re_lu_25");

        if ( x41 == NULL || x19 == NULL) {
            printf("Given memObjects are null in leaky_re_lu_25.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x41);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x19);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in leaky_re_lu_25.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelleaky_re_lu_25\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpConvolution2D (DetectionLayer_internal_1)")
  {
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "DetectionLayer_internal_1");

        if ( x19 == NULL || x20 == NULL || DetectionLayer_internal_1_W == NULL) {
            printf("Given memObjects are null in DetectionLayer_internal_1.\n");
            exit(-1);
        }
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x19);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &x20);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &DetectionLayer_internal_1_W);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in DetectionLayer_internal_1.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelDetectionLayer_internal_1\n", errNum);
          exit(-1);
        }
    }
  }
  INTERNAL_CNN_STOPWATCH("OpArithmetic<ADD> (DetectionLayer_internal_2)")
  {
    /*TODO need to make sure <name> is unique.*/
    {
        size_t localWorkSize[2] = {1, 1};
        size_t globalWorkSize[2] = {8, 10};

        cl_kernel layer;
        createKernel(&program, &layer, "DetectionLayer_internal_2");

        if (x20 == NULL || DetectionLayer_internal_2_A == NULL || out_0 == NULL) {
            printf("Given memObjects are null in DetectionLayer_internal_2.\n");
            exit(-1);
        }
        /*TODO check whether in and out need to have the & in front.*/
        errNum = clSetKernelArg(layer, 0, sizeof(cl_mem), (void *) &x20);
        errNum |= clSetKernelArg(layer, 1, sizeof(cl_mem), (void *) &DetectionLayer_internal_2_A);
        errNum |= clSetKernelArg(layer, 2, sizeof(cl_mem), (void *) &out_0);

        if (errNum != CL_SUCCESS) {
            printf("Error setting Kernel Arguments in DetectionLayer_internal_2.\n");
            exit(-1);
        }
        // enqueue and wait for processing to end
        errNum = clEnqueueNDRangeKernel(commandQueue, layer, 2,
                                        NULL, globalWorkSize,
                                        localWorkSize, 0, NULL,
                                        NULL);
        if (errNum != 0)
        {
          printf("Error Status %d in clEnqueueNDRangeKernelDetectionLayer_internal_2\n", errNum);
          exit(-1);
        }
    }
  }
}

#ifdef CNN_TEST

#include <stdlib.h>
#include <stdio.h>
#include <sys/time.h>

int main()
{
    const int IN_DIM = 57600;
    const int OUT_DIM = 480;
    const int NUM_RUNS = 1;

    alignas(16) float in[IN_DIM];
    alignas(16) float out[OUT_DIM];

    // read image
    FILE *f = fopen("img_0.bin", "r");

    if (f == NULL)
    {
        for (size_t i = 0; i < IN_DIM; i++)
        {
            in[i] = rand() % 256;
        }
    }
    else
    {
        fread(&in, sizeof(float), IN_DIM, f);
    }
    if (initOcl()) {
        fprintf(stderr,"Failed InitOcl\n");
        exit(-1);
    }
    initclmemobjects();

    cl_mem cl_in;
	cl_in = clCreateBuffer(context,
  	CL_MEM_READ_ONLY  | CL_MEM_COPY_HOST_PTR,
  	IN_DIM * sizeof(float), in, &errNum);

    cl_mem cl_out;
	cl_out = clCreateBuffer(context,
  	CL_MEM_READ_ONLY | CL_MEM_COPY_HOST_PTR,
  	OUT_DIM * sizeof(float), out, &errNum);

    for (int run = 0; run < NUM_RUNS; run++)
    {
        // reset out
        for (size_t i = 0; i < OUT_DIM; i++)
        {
            out[i] = 0.0f;
        }

        // run function
        CNN_STOPWATCH("__dcg_cnn")
        {
            cnn(cl_in, cl_out);
        }
    }

    // get memory from gpu
    errNum = clEnqueueReadBuffer(commandQueue,
                                 cl_out,
                                 CL_TRUE,
                                 0,
                                 OUT_DIM * sizeof(float),
                                 out,
                                 0,
                                 NULL,
                                 NULL);

    if (errNum != 0) {
      printf("Error Status %d in clEnqueueReadBuffer\n", errNum);
      exit(-1);
    }

    printf("values:");
    for (int i = 0; i < OUT_DIM; i++)
    {
        printf(" %f", out[i]);
    }
    printf("\n");

    printf("timings:");
    for (int i = 0; i < NUM_RUNS; i++)
    {
        printf(" %d", stopwatch_timings["__dcg_cnn"][i]);
    }
    printf("\n");

    for ( auto &pair : stopwatch_timings )
    {
        printf("%s:", pair.first.c_str());
        for (auto const& timing: pair.second)
        {
            printf(" %d", timing);
        }
        printf("\n");
    }

    int total_elapsed = total_time(stopwatch_timings["__dcg_cnn"]);
    printf("time: %d nano seconds\nruns: %d\naverage: %d nano seconds/run\n", total_elapsed, NUM_RUNS, total_elapsed/NUM_RUNS);

    return 0;
}

#endif
